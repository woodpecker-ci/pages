"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([["9943"],{14693:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>t,metadata:()=>i,assets:()=>d,toc:()=>c,contentTitle:()=>o});var i=JSON.parse('{"id":"usage/advanced-usage","title":"Advanced usage","description":"Advanced YAML syntax","source":"@site/docs/20-usage/90-advanced-usage.md","sourceDirName":"20-usage","slug":"/usage/advanced-usage","permalink":"/docs/next/usage/advanced-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/docs/20-usage/90-advanced-usage.md","tags":[],"version":"current","sidebarPosition":90,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Status Badges","permalink":"/docs/next/usage/badges"},"next":{"title":"Troubleshooting","permalink":"/docs/next/usage/troubleshooting"}}'),a=s("52676"),r=s("23663");let t={},o="Advanced usage",d={},c=[{value:"Advanced YAML syntax",id:"advanced-yaml-syntax",level:2},{value:"Anchors &amp; aliases",id:"anchors--aliases",level:3},{value:"Map merges and overwrites",id:"map-merges-and-overwrites",level:3},{value:"Sequence merges",id:"sequence-merges",level:3},{value:"References",id:"references",level:3},{value:"Persisting environment data between steps",id:"persisting-environment-data-between-steps",level:2},{value:"Declaring global variables",id:"declaring-global-variables",level:2},{value:"Docker in docker (dind) setup",id:"docker-in-docker-dind-setup",level:2}];function l(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"advanced-usage",children:"Advanced usage"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-yaml-syntax",children:"Advanced YAML syntax"}),"\n",(0,a.jsx)(n.p,{children:"YAML has some advanced syntax features that can be used like variables to reduce duplication in your pipeline config:"}),"\n",(0,a.jsx)(n.h3,{id:"anchors--aliases",children:"Anchors & aliases"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/#3222-anchors-and-aliases",children:"YAML anchors & aliases"})," as variables in your pipeline config."]}),"\n",(0,a.jsx)(n.p,{children:"To convert this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: test\n    image: golang:1.18\n    commands: go test ./...\n  - name: build\n    image: golang:1.18\n    commands: build\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Just add a new section called ",(0,a.jsx)(n.strong,{children:"variables"})," like this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:"+variables:\n+  - &golang_image 'golang:1.18'\n\n steps:\n   - name: test\n-    image: golang:1.18\n+    image: *golang_image\n     commands: go test ./...\n   - name: build\n-    image: golang:1.18\n+    image: *golang_image\n     commands: build\n"})}),"\n",(0,a.jsx)(n.h3,{id:"map-merges-and-overwrites",children:"Map merges and overwrites"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"variables:\n  - &base-plugin-settings\n    target: dist\n    recursive: false\n    try: true\n  - &special-setting\n    special: true\n  - &some-plugin codeberg.org/6543/docker-images/print_env\n\nsteps:\n  - name: develop\n    image: *some-plugin\n    settings:\n      <<: [*base-plugin-settings, *special-setting] # merge two maps into an empty map\n    when:\n      branch: develop\n\n  - name: main\n    image: *some-plugin\n    settings:\n      <<: *base-plugin-settings # merge one map and ...\n      try: false # ... overwrite original value\n      ongoing: false # ... adding a new value\n    when:\n      branch: main\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sequence-merges",children:"Sequence merges"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"variables:\n  pre_cmds: &pre_cmds\n    - echo start\n    - whoami\n  post_cmds: &post_cmds\n    - echo stop\n  hello_cmd: &hello_cmd\n    - echo hello\n\nsteps:\n  - name: step1\n    image: debian\n    commands:\n      - <<: *pre_cmds # prepend a sequence\n      - echo exec step now do dedicated things\n      - <<: *post_cmds # append a sequence\n  - name: step2\n    image: debian\n    commands:\n      - <<: [*pre_cmds, *hello_cmd] # prepend two sequences\n      - echo echo from second step\n      - <<: *post_cmds\n"})}),"\n",(0,a.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/#3222-anchors-and-aliases",children:"Official YAML specification"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://learnxinyminutes.com/docs/yaml",children:"YAML cheat sheet"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"persisting-environment-data-between-steps",children:"Persisting environment data between steps"}),"\n",(0,a.jsx)(n.p,{children:"One can create a file containing environment variables, and then source it in each step that needs them."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'steps:\n  - name: init\n    image: bash\n    commands:\n      - echo "FOO=hello" >> envvars\n      - echo "BAR=world" >> envvars\n\n  - name: debug\n    image: bash\n    commands:\n      - source envvars\n      - echo $FOO\n'})}),"\n",(0,a.jsx)(n.h2,{id:"declaring-global-variables",children:"Declaring global variables"}),"\n",(0,a.jsxs)(n.p,{children:["As described in ",(0,a.jsx)(n.a,{href:"/docs/next/usage/environment#global-environment-variables",children:"Global environment variables"}),", you can define global variables:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ini",children:"WOODPECKER_ENVIRONMENT=first_var:value1,second_var:value2\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note that this tightly couples the server and app configurations (where the app is a completely separate application). But this is a good option for truly global variables which should apply to all steps in all pipelines for all apps."}),"\n",(0,a.jsx)(n.h2,{id:"docker-in-docker-dind-setup",children:"Docker in docker (dind) setup"}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["This set up will only work on trusted repositories and for security reasons should only be used in private environments.\nSee ",(0,a.jsx)(n.a,{href:"/docs/next/usage/project-settings#trusted",children:"project settings"}),' to enable "trusted" mode.']})}),"\n",(0,a.jsxs)(n.p,{children:["The snippet below shows how a step can communicate with the docker daemon running in a ",(0,a.jsx)(n.code,{children:"docker:dind"})," service."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["If your goal is to build/publish OCI images, consider using the ",(0,a.jsx)(n.a,{href:"https://woodpecker-ci.org/plugins/Docker%20Buildx",children:"Docker Buildx Plugin"})," instead."]})}),"\n",(0,a.jsxs)(n.p,{children:["First we need to define a service running a docker with the ",(0,a.jsx)(n.code,{children:"dind"})," tag.\nThis service must run in ",(0,a.jsx)(n.code,{children:"privileged"})," mode:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"services:\n  - name: docker\n    image: docker:dind # use 'docker:<major-version>-dind' or similar in production\n    privileged: true\n    ports:\n      - 2376\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Next, we need to set up TLS communication between the ",(0,a.jsx)(n.code,{children:"dind"})," service and the step that wants to communicate with the docker daemon (unauthenticated TCP connections have been deprecated ",(0,a.jsx)(n.a,{href:"https://github.com/docker/cli/blob/v27.4.0/docs/deprecated.md#unauthenticated-tcp-connections",children:"as of docker v27"})," and will result in an error in v28)."]}),"\n",(0,a.jsxs)(n.p,{children:["This can be achieved by letting the daemon generate TLS certificates and share them with the client through an agent volume mount (",(0,a.jsx)(n.code,{children:"/opt/woodpeckerci/dind-certs"})," in the example below)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:"services:\n  - name: docker\n    image: docker:dind # use 'docker:<major-version>-dind' or similar in production\n    privileged: true\n+    environment:\n+      DOCKER_TLS_CERTDIR: /dind-certs\n+    volumes:\n+      - /opt/woodpeckerci/dind-certs:/dind-certs\n     ports:\n       - 2376\n"})}),"\n",(0,a.jsx)(n.p,{children:"In the docker client step:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Set the ",(0,a.jsx)(n.code,{children:"DOCKER_*"})," environment variables shown below to configure the connection with the daemon.\nThese generic docker environment variables that are framework-agnostic (e.g. frameworks like ",(0,a.jsx)(n.a,{href:"https://testcontainers.com/",children:"TestContainers"}),", ",(0,a.jsx)(n.a,{href:"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-docker-compose",children:"Spring Boot Docker Compose"})," do all respect them)."]}),"\n",(0,a.jsxs)(n.li,{children:["Mount the volume to the location where the daemon has created the certificates (",(0,a.jsx)(n.code,{children:"/opt/woodpeckerci/dind-certs"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Test the connection with the docker client:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:'steps:\n  - name: test\n    image: docker:cli # in production use something like \'docker:<major version>-cli\'\n+    environment:\n+      DOCKER_HOST: "tcp://docker:2376"\n+      DOCKER_CERT_PATH: "/dind-certs/client"\n+      DOCKER_TLS_VERIFY: "1"\n+    volumes:\n+      - /opt/woodpeckerci/dind-certs:/dind-certs\n    commands:\n      - docker version\n'})}),"\n",(0,a.jsx)(n.p,{children:"This step should output the server and client version information if everything has been set up correctly."}),"\n",(0,a.jsx)(n.p,{children:"Full example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: test\n    image: docker:cli # use 'docker:<major-version>-cli' or similar in production\n    environment:\n      DOCKER_HOST: 'tcp://docker:2376'\n      DOCKER_CERT_PATH: '/dind-certs/client'\n      DOCKER_TLS_VERIFY: '1'\n    volumes:\n      - /opt/woodpeckerci/dind-certs:/dind-certs\n    commands:\n      - docker version\n\nservices:\n  - name: docker\n    image: docker:dind # use 'docker:<major-version>-dind' or similar in production\n    privileged: true\n    environment:\n      DOCKER_TLS_CERTDIR: /dind-certs\n    volumes:\n      - /opt/woodpeckerci/dind-certs:/dind-certs\n    ports:\n      - 2376\n"})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},23663:function(e,n,s){s.d(n,{Z:function(){return o},a:function(){return t}});var i=s(75271);let a={},r=i.createContext(a);function t(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);