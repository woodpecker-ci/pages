"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[2316],{27056:e=>{e.exports=JSON.parse('{"name":"Sonatype Nexus","url":"https://github.com/rockdrilla/woodpecker-sonatype-nexus","icon":"https://www.sonatype.com/hubfs/2-2023-Product%20Logos/Repo%20Nav%20Icon%20updated.png","description":"Plugin to publish artifacts to Sonatype Nexus","docs":"<p>Woodpecker CI plugin to publish artifacts to Sonatype Nexus.</p>\\n<h2>Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Required</th>\\n<th>Default value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>url</code></td>\\n<td><strong>yes</strong></td>\\n<td><em>none</em></td>\\n<td>Sonatype Nexus URL (e.g. <code>https://nexus.domain.com</code>)</td>\\n</tr>\\n<tr>\\n<td><code>auth</code></td>\\n<td><em>no</em> *</td>\\n<td><em>none</em></td>\\n<td>HTTP Basic Authentication (plain-text, in form <code>{username}:{password}</code>)</td>\\n</tr>\\n<tr>\\n<td><code>auth.base64</code></td>\\n<td><em>no</em> *</td>\\n<td><em>none</em></td>\\n<td>HTTP Basic Authentication (base64-encoded)</td>\\n</tr>\\n<tr>\\n<td><code>auth.header</code></td>\\n<td><em>no</em> *</td>\\n<td><em>none</em></td>\\n<td>generic HTTP authentication header (in form <code>{Header}={Value}</code>)</td>\\n</tr>\\n<tr>\\n<td><code>upload</code></td>\\n<td><strong>yes</strong></td>\\n<td><code>[]</code></td>\\n<td>List of upload rules (JSON array, see below)</td>\\n</tr>\\n</tbody></table>\\n<p><strong>Notes:</strong></p>\\n<ul>\\n<li><p>At least one authentication setting <strong>must</strong> be provided.</p>\\n<p>If there are more than one setting were specified then setting is selected in order of priority (from most to least):</p>\\n<ul>\\n<li><code>auth.header</code></li>\\n<li><code>auth.base64</code></li>\\n<li><code>auth</code></li>\\n</ul>\\n</li>\\n<li><p>Setting names above are \\"short\\" variants.</p>\\n<p>Full-qualified setting name looks like \\"<code>nexus.{short_name}</code>\\"\\nand has higher priority if short variant is specified too.</p>\\n</li>\\n<li><p>Dots in setting names are NOT mandatory.</p>\\n<p>The one may replace dots (\\"<code>.</code>\\") with hyphens (\\"<code>-</code>\\") or underscores (\\"<code>_</code>\\").</p>\\n</li>\\n</ul>\\n<h3>Upload settings</h3>\\n<p><code>upload</code> list consists of elements with following properties:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Name</th>\\n<th>Required</th>\\n<th>Default value</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>repository</code></td>\\n<td><strong>yes</strong></td>\\n<td><em>none</em></td>\\n<td>Repository name (of type \\"hosted\\")</td>\\n</tr>\\n<tr>\\n<td><code>paths</code></td>\\n<td><strong>yes</strong></td>\\n<td><em>none</em></td>\\n<td>List of files to upload (accepts <a href=\\"https://pkg.go.dev/path/filepath#Match\\">globs</a>)</td>\\n</tr>\\n</tbody></table>\\n<p>Additional (repository-specific) properties may be specified right with settings specified above.</p>\\n<h2>Example</h2>\\n<pre><code class=\\"language-yaml\\">steps:\\n- name: publish\\n  image: rockdrilla/woodpecker-sonatype-nexus\\n  settings:\\n    url: https://nexus.domain.com\\n    auth.base64:\\n      from_secret: nexus-auth-b64\\n    upload:\\n      - repository: project-apt\\n        paths:\\n          - dist/all/*.deb\\n          - dist/amd64/*.deb\\n      - repository: project-raw\\n        paths:\\n          - dist/raw/all-in-one.tar.xz\\n        # property from upload specification for \\"raw\\" repository\\n        directory: /build/\\n      - repository: project-r\\n        paths:\\n          - dist/r/*.tar.gz\\n        # property from upload specification for \\"r\\" repository\\n        pathId: /src/contrib/\\n</code></pre>\\n<h2>Notes</h2>\\n<ul>\\n<li><p>Preferred setting for HTTP Basic Authentication is <code>auth.base64</code> as there is minimal chance for breaking value during serialization/deserialization.</p>\\n</li>\\n<li><p>Generic setting <code>auth.header</code> is provided for cases where authentication differs from HTTP Basic Authentication.</p>\\n</li>\\n<li><p>The one may use <a href=\\"https://help.sonatype.com/en/user-tokens.html\\">User Tokens</a> for HTTP Basic Authentication.</p>\\n<p>There is no need for special handling as tokens are conform to scheme:</p>\\n<p><code>{token name code}:{token pass code}</code></p>\\n</li>\\n<li><p>The one may consult with Sonatype Nexus REST API for repository-specific properties for component uploads.</p>\\n<p>Sonatype Nexus REST API is available via:</p>\\n<ul>\\n<li>Web UI  - <code>https://nexus.domain.com/#admin/system/api</code></li>\\n<li>Swagger - <code>https://nexus.domain.com/service/rest/swagger.json</code></li>\\n</ul>\\n<p>Points of interest are:</p>\\n<ul>\\n<li><code>/v1/formats/upload-specs</code></li>\\n<li><code>/v1/components</code> (with <code>POST</code> method)</li>\\n</ul>\\n<p>Also, there is <a href=\\"./upload-spec-fallback.go\\">fallback upload spec</a>:</p>\\n<ul>\\n<li>if component/asset field does not specify <code>Optional: true</code> then this field is <strong>required</strong>.</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>Known limitations</h2>\\n<ul>\\n<li><p>No more than 32 assets may be uploaded at once (if destination repository type supports multiple upload).</p>\\n<p>This is (merely) artificial limit for <strong>single</strong> upload - plugin will upload all listed files but via several calls.</p>\\n<p>If you suppose that Sonatype Nexus is viable to receive more assets at once - feel free to contact me.</p>\\n</li>\\n</ul>\\n","tags":["publish","Sonatype","Nexus"],"author":"Konstantin Demin","containerImage":"rockdrilla/woodpecker-sonatype-nexus","containerImageUrl":"https://hub.docker.com/r/rockdrilla/woodpecker-sonatype-nexus","verified":false}')}}]);