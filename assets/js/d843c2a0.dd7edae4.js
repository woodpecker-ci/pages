"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([["5893"],{85858:function(e,n,a){a.r(n),a.d(n,{default:()=>p,frontMatter:()=>r,metadata:()=>s,assets:()=>l,toc:()=>d,contentTitle:()=>o});var s=JSON.parse('{"id":"usage/pipeline-management","title":"Advanced pipeline management","description":"Using variables","source":"@site/versioned_docs/version-1.0/20-usage/90-pipeline-management.md","sourceDirName":"20-usage","slug":"/usage/pipeline-management","permalink":"/docs/1.0/usage/pipeline-management","draft":false,"unlisted":false,"editUrl":"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/versioned_docs/version-1.0/20-usage/90-pipeline-management.md","tags":[],"version":"1.0","sidebarPosition":90,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Status Badges","permalink":"/docs/1.0/usage/badges"},"next":{"title":"Setup","permalink":"/docs/1.0/administration/setup"}}'),i=a("52676"),t=a("23663");let r={},o="Advanced pipeline management",l={},d=[{value:"Using variables",id:"using-variables",level:2},{value:"YAML extensions",id:"yaml-extensions",level:3},{value:"YAML extensions (alternate form)",id:"yaml-extensions-alternate-form",level:3},{value:"Persisting environment data between steps",id:"persisting-environment-data-between-steps",level:3},{value:"Declaring global variables in <code>docker-compose.yml</code>",id:"declaring-global-variables-in-docker-composeyml",level:3}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"advanced-pipeline-management",children:"Advanced pipeline management"})}),"\n",(0,i.jsx)(n.h2,{id:"using-variables",children:"Using variables"}),"\n",(0,i.jsx)(n.p,{children:'Once your pipeline starts to grow in size, it will become important to keep it DRY ("Don\'t Repeat Yourself") by using variables and environment variables. Depending on your specific need, there are a number of options.'}),"\n",(0,i.jsx)(n.h3,{id:"yaml-extensions",children:"YAML extensions"}),"\n",(0,i.jsxs)(n.p,{children:["As described in ",(0,i.jsx)(n.a,{href:"/docs/1.0/usage/advanced-yaml-syntax",children:"Advanced YAML syntax"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"variables:\n  - &golang_image 'golang:1.18'\n\n steps:\n   build:\n     image: *golang_image\n     commands: build\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"golang_image"})," alias cannot be used with string interpolation. But this is otherwise a good option for most cases."]}),"\n",(0,i.jsx)(n.h3,{id:"yaml-extensions-alternate-form",children:"YAML extensions (alternate form)"}),"\n",(0,i.jsx)(n.p,{children:"Another approach using YAML extensions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:'variables:\n  - global_env: &global_env\n      - BASH_VERSION=1.2.3\n      - PATH_SRC=src/\n      - PATH_TEST=test/\n      - FOO=something\n\nsteps:\n  build:\n    image: bash:${BASH_VERSION}\n    directory: ${PATH_SRC}\n    commands:\n      - make ${FOO} -o ${PATH_TEST}\n    environment: *global_env\n\n  test:\n    image: bash:${BASH_VERSION}\n    commands:\n      - test ${PATH_TEST}\n    environment:\n      - <<:*global_env\n      - ADDITIONAL_LOCAL="var value"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"persisting-environment-data-between-steps",children:"Persisting environment data between steps"}),"\n",(0,i.jsx)(n.p,{children:"One can create a file containing environment variables, and then source it in each step that needs them."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:'steps:\n  init:\n    image: bash\n    commands: echo "FOO=hello" >> envvars\n      echo "BAR=world" >> envvars\n\n  debug:\n    image: bash\n    commands:\n      - source envvars\n      - echo $FOO\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"declaring-global-variables-in-docker-composeyml",children:["Declaring global variables in ",(0,i.jsx)(n.code,{children:"docker-compose.yml"})]}),"\n",(0,i.jsxs)(n.p,{children:["As described in ",(0,i.jsx)(n.a,{href:"/docs/1.0/usage/environment#global-environment-variables",children:"Global environment variables"}),", one can define global variables:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"services:\n  woodpecker-server:\n    # ...\n    environment:\n      - WOODPECKER_ENVIRONMENT=first_var:value1,second_var:value2\n      # ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note that this tightly couples the server and app configurations (where the app is a completely separate application). But this is a good option for truly global variables which should apply to all steps in all pipelines for all apps."})]})}function p(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},23663:function(e,n,a){a.d(n,{Z:function(){return o},a:function(){return r}});var s=a(75271);let i={},t=s.createContext(i);function r(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);