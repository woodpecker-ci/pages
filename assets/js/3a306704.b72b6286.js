"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[887],{88596:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>r});var i=s(13274),l=s(74169);const o={},a="Workflow syntax",c={id:"usage/workflow-syntax",title:"Workflow syntax",description:"The workflow section defines a list of steps to build, test and deploy your code. Steps are executed serially, in the order in which they are defined. If a step returns a non-zero exit code, the workflow and therefore all other workflows and the pipeline immediately aborts and returns a failure status.",source:"@site/versioned_docs/version-2.3/20-usage/20-workflow-syntax.md",sourceDirName:"20-usage",slug:"/usage/workflow-syntax",permalink:"/docs/2.3/usage/workflow-syntax",draft:!1,unlisted:!1,editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/versioned_docs/version-2.3/20-usage/20-workflow-syntax.md",tags:[],version:"2.3",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Terminology",permalink:"/docs/2.3/usage/terminiology/"},next:{title:"Workflows",permalink:"/docs/2.3/usage/workflows"}},d={},r=[{value:"Skip Commits",id:"skip-commits",level:2},{value:"Steps",id:"steps",level:2},{value:"File changes are incremental",id:"file-changes-are-incremental",level:3},{value:"<code>image</code>",id:"image",level:3},{value:"<code>commands</code>",id:"commands",level:3},{value:"<code>entrypoint</code>",id:"entrypoint",level:3},{value:"<code>environment</code>",id:"environment",level:3},{value:"<code>secrets</code>",id:"secrets",level:3},{value:"<code>failure</code>",id:"failure",level:3},{value:"<code>when</code> - Conditional Execution",id:"when---conditional-execution",level:3},{value:"<code>repo</code>",id:"repo",level:4},{value:"<code>branch</code>",id:"branch",level:4},{value:"<code>event</code>",id:"event",level:4},{value:"<code>cron</code>",id:"cron",level:4},{value:"<code>ref</code>",id:"ref",level:4},{value:"<code>status</code>",id:"status",level:4},{value:"<code>platform</code>",id:"platform",level:4},{value:"<code>environment</code>",id:"environment-1",level:4},{value:"<code>matrix</code>",id:"matrix",level:4},{value:"<code>instance</code>",id:"instance",level:4},{value:"<code>path</code>",id:"path",level:4},{value:"<code>evaluate</code>",id:"evaluate",level:4},{value:"<code>depends_on</code>",id:"depends_on",level:3},{value:"<code>volumes</code>",id:"volumes",level:3},{value:"<code>detach</code>",id:"detach",level:3},{value:"<code>directory</code>",id:"directory",level:3},{value:"<code>services</code>",id:"services",level:2},{value:"<code>workspace</code>",id:"workspace",level:2},{value:"<code>matrix</code>",id:"matrix-1",level:2},{value:"<code>labels</code>",id:"labels",level:2},{value:"Filter by platform",id:"filter-by-platform",level:3},{value:"<code>variables</code>",id:"variables",level:2},{value:"<code>clone</code>",id:"clone",level:2},{value:"Git Submodules",id:"git-submodules",level:3},{value:"<code>skip_clone</code>",id:"skip_clone",level:2},{value:"<code>when</code> - Global workflow conditions",id:"when---global-workflow-conditions",level:2},{value:"<code>repo</code>",id:"repo-1",level:3},{value:"<code>branch</code>",id:"branch-1",level:3},{value:"<code>event</code>",id:"event-1",level:3},{value:"<code>ref</code>",id:"ref-1",level:3},{value:"<code>environment</code>",id:"environment-2",level:3},{value:"<code>instance</code>",id:"instance-1",level:3},{value:"<code>path</code>",id:"path-1",level:3},{value:"<code>depends_on</code>",id:"depends_on-1",level:2},{value:"<code>runs_on</code>",id:"runs_on",level:2},{value:"Privileged mode",id:"privileged-mode",level:2}];function t(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"workflow-syntax",children:"Workflow syntax"}),"\n",(0,i.jsx)(n.p,{children:"The workflow section defines a list of steps to build, test and deploy your code. Steps are executed serially, in the order in which they are defined. If a step returns a non-zero exit code, the workflow and therefore all other workflows and the pipeline immediately aborts and returns a failure status."}),"\n",(0,i.jsx)(n.p,{children:"Example steps:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - name: backend\n    image: golang\n    commands:\n      - go build\n      - go test\n  - name: frontend\n    image: node\n    commands:\n      - npm install\n      - npm run test\n      - npm run build\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example we define two steps, ",(0,i.jsx)(n.code,{children:"frontend"})," and ",(0,i.jsx)(n.code,{children:"backend"}),". The names of these steps are completely arbitrary."]}),"\n",(0,i.jsx)(n.p,{children:"The name is optional, if not added the steps will be numerated."}),"\n",(0,i.jsx)(n.p,{children:"Another way to name a step is by using dictionaries:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n  backend:\n    image: golang\n    commands:\n      - go build\n      - go test\n  frontend:\n    image: node\n    commands:\n      - npm install\n      - npm run test\n      - npm run build\n"})}),"\n",(0,i.jsx)(n.h2,{id:"skip-commits",children:"Skip Commits"}),"\n",(0,i.jsxs)(n.p,{children:["Woodpecker gives the ability to skip individual commits by adding ",(0,i.jsx)(n.code,{children:"[SKIP CI]"})," or ",(0,i.jsx)(n.code,{children:"[CI SKIP]"})," to the commit message. Note this is case-insensitive."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'git commit -m "updated README [CI SKIP]"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(n.p,{children:"Every step of your workflow executes commands inside a specified container. The defined commands are executed serially.\nThe associated commit is checked out with git to a workspace which is mounted to every step of the workflow as the working directory."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: backend\n     image: golang\n     commands:\n+      - go build\n+      - go test\n"})}),"\n",(0,i.jsx)(n.h3,{id:"file-changes-are-incremental",children:"File changes are incremental"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Woodpecker clones the source code in the beginning of the workflow"}),"\n",(0,i.jsx)(n.li,{children:"Changes to files are persisted through steps as the same volume is mounted to all steps"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title=".woodpecker.yaml"',children:'steps:\n  - name: build\n    image: debian\n    commands:\n      - echo "test content" > myfile\n  - name: a-test-step\n    image: debian\n    commands:\n      - cat myfile\n'})}),"\n",(0,i.jsx)(n.h3,{id:"image",children:(0,i.jsx)(n.code,{children:"image"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker pulls the defined image and uses it as environment to execute the workflow step commands, for plugins and for service containers."}),"\n",(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsx)(n.code,{children:"local"})," backend, the ",(0,i.jsx)(n.code,{children:"image"})," entry is used to specify the shell, such as Bash or Fish, that is used to run the commands."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: build\n+    image: golang:1.6\n     commands:\n       - go build\n       - go test\n\n   - name: publish\n+    image: plugins/docker\n     repo: foo/bar\n\n services:\n   - name: database\n+    image: mysql\n"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker supports any valid Docker image from any Docker registry:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"image: golang\nimage: golang:1.7\nimage: library/golang:1.7\nimage: index.docker.io/library/golang\nimage: index.docker.io/library/golang:1.7\n"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker does not automatically upgrade container images. Example configuration to always pull the latest image when updates are available:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: build\n     image: golang:latest\n+    pull: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Learn more how you can use images from ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/registries",children:"different registries"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"commands",children:(0,i.jsx)(n.code,{children:"commands"})}),"\n",(0,i.jsx)(n.p,{children:"Commands of every step are executed serially as if you would enter them into your local shell."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: backend\n     image: golang\n     commands:\n+      - go build\n+      - go test\n"})}),"\n",(0,i.jsx)(n.p,{children:"There is no magic here. The above commands are converted to a simple shell script. The commands in the above example are roughly converted to the below script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/sh\nset -e\n\ngo build\ngo test\n"})}),"\n",(0,i.jsx)(n.p,{children:"The above shell script is then executed as the container entrypoint. The below docker command is an (incomplete) example of how the script is executed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --entrypoint=build.sh golang\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Only build steps can define commands. You cannot use commands with plugins or services."})}),"\n",(0,i.jsx)(n.h3,{id:"entrypoint",children:(0,i.jsx)(n.code,{children:"entrypoint"})}),"\n",(0,i.jsxs)(n.p,{children:["Allows you to specify the entrypoint for containers. Note that this must be a list of the command and its arguments (e.g. ",(0,i.jsx)(n.code,{children:'["/bin/sh", "-c"]'}),")."]}),"\n",(0,i.jsx)(n.h3,{id:"environment",children:(0,i.jsx)(n.code,{children:"environment"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker provides the ability to pass environment variables to individual steps."}),"\n",(0,i.jsxs)(n.p,{children:["For more details check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/environment",children:"environment docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"secrets",children:(0,i.jsx)(n.code,{children:"secrets"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker provides the ability to store named parameters external to the YAML configuration file, in a central secret store. These secrets can be passed to individual steps of the workflow at runtime."}),"\n",(0,i.jsxs)(n.p,{children:["For more details check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/secrets",children:"secrets docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"failure",children:(0,i.jsx)(n.code,{children:"failure"})}),"\n",(0,i.jsxs)(n.p,{children:["Some of the steps may be allowed to fail without causing the whole workflow and therefore pipeline to report a failure (e.g., a step executing a linting check). To enable this, add ",(0,i.jsx)(n.code,{children:"failure: ignore"})," to your step. If Woodpecker encounters an error while executing the step, it will report it as failed but still executes the next steps of the workflow, if any, without affecting the status of the workflow."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: backend\n     image: golang\n     commands:\n       - go build\n       - go test\n+    failure: ignore\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"when---conditional-execution",children:[(0,i.jsx)(n.code,{children:"when"})," - Conditional Execution"]}),"\n",(0,i.jsxs)(n.p,{children:["Woodpecker supports defining a list of conditions for a step by using a ",(0,i.jsx)(n.code,{children:"when"})," block. If at least one of the conditions in the ",(0,i.jsx)(n.code,{children:"when"})," block evaluate to true the step is executed, otherwise it is skipped. A condition can be a check like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: slack\n     image: plugins/slack\n     settings:\n       channel: dev\n+    when:\n+      - event: pull_request\n+        repo: test/test\n+      - event: push\n+        branch: main\n"})}),"\n",(0,i.jsx)(n.h4,{id:"repo",children:(0,i.jsx)(n.code,{children:"repo"})}),"\n",(0,i.jsx)(n.p,{children:"Example conditional execution by repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: slack\n     image: plugins/slack\n     settings:\n       channel: dev\n+    when:\n+      - repo: test/test\n"})}),"\n",(0,i.jsx)(n.h4,{id:"branch",children:(0,i.jsx)(n.code,{children:"branch"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Branch conditions are not applied to tags."})}),"\n",(0,i.jsx)(n.p,{children:"Example conditional execution by branch:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: slack\n     image: plugins/slack\n     settings:\n       channel: dev\n+    when:\n+      - branch: main\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The step now triggers on main branch, but also if the target branch of a pull request is ",(0,i.jsx)(n.code,{children:"main"}),". Add an event condition to limit it further to pushes on main only."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the branch is ",(0,i.jsx)(n.code,{children:"main"})," or ",(0,i.jsx)(n.code,{children:"develop"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - branch: [main, develop]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the branch starts with ",(0,i.jsx)(n.code,{children:"prefix/*"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - branch: prefix/*\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The branch matching is done using ",(0,i.jsx)(n.a,{href:"https://github.com/bmatcuk/doublestar/#usage",children:"doublestar"}),", note that a pattern starting with ",(0,i.jsx)(n.code,{children:"*"})," should be put between quotes and a literal ",(0,i.jsx)(n.code,{children:"/"})," needs to be escaped. A few examples:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*\\\\/*"})," to match patterns with exactly 1 ",(0,i.jsx)(n.code,{children:"/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*\\\\/**"})," to match patters with at least 1 ",(0,i.jsx)(n.code,{children:"/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*"})," to match patterns without ",(0,i.jsx)(n.code,{children:"/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**"})," to match everything"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Execute a step using custom include and exclude logic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - branch:\n      include: [main, release/*]\n      exclude: [release/1.0.0, release/1.1.*]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"event",children:(0,i.jsx)(n.code,{children:"event"})}),"\n",(0,i.jsxs)(n.p,{children:["Available events: ",(0,i.jsx)(n.code,{children:"push"}),", ",(0,i.jsx)(n.code,{children:"pull_request"}),", ",(0,i.jsx)(n.code,{children:"pull_request_closed"}),", ",(0,i.jsx)(n.code,{children:"tag"}),", ",(0,i.jsx)(n.code,{children:"release"}),", ",(0,i.jsx)(n.code,{children:"deployment"}),", ",(0,i.jsx)(n.code,{children:"cron"}),", ",(0,i.jsx)(n.code,{children:"manual"})]}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the build event is a ",(0,i.jsx)(n.code,{children:"tag"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - event: tag\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the pipeline event is a ",(0,i.jsx)(n.code,{children:"push"})," to a specified branch:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"when:\n  - event: push\n+   branch: main\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for multiple events:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - event: [push, tag, deployment]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cron",children:(0,i.jsx)(n.code,{children:"cron"})}),"\n",(0,i.jsxs)(n.p,{children:["This filter ",(0,i.jsx)(n.strong,{children:"only"})," applies to cron events and filters based on the name of a cron job."]}),"\n",(0,i.jsxs)(n.p,{children:["Make sure to have a ",(0,i.jsx)(n.code,{children:"event: cron"})," condition in the ",(0,i.jsx)(n.code,{children:"when"}),"-filters as well."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - event: cron\n    cron: sync_* # name of your cron job\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/docs/2.3/usage/cron",children:"Read more about cron"})}),"\n",(0,i.jsx)(n.h4,{id:"ref",children:(0,i.jsx)(n.code,{children:"ref"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ref"})," filter compares the git reference against which the workflow is executed.\nThis allows you to filter, for example, tags that must start with ",(0,i.jsx)(n.strong,{children:"v"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - event: tag\n    ref: refs/tags/v*\n"})}),"\n",(0,i.jsx)(n.h4,{id:"status",children:(0,i.jsx)(n.code,{children:"status"})}),"\n",(0,i.jsx)(n.p,{children:"There are use cases for executing steps on failure, such as sending notifications for failed workflow / pipeline. Use the status constraint to execute steps even when the workflow fails:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: slack\n     image: plugins/slack\n     settings:\n       channel: dev\n+    when:\n+      - status: [ success, failure ]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"platform",children:(0,i.jsx)(n.code,{children:"platform"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This condition should be used in conjunction with a ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/matrix-workflows#example-matrix-pipeline-using-multiple-platforms",children:"matrix"})," workflow as a regular workflow will only be executed by a single agent which only has one arch."]})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for a specific platform:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - platform: linux/amd64\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for a specific platform using wildcards:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - platform: [linux/*, windows/amd64]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"environment-1",children:(0,i.jsx)(n.code,{children:"environment"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for deployment events matching the target deployment environment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - environment: production\n  - event: deployment\n"})}),"\n",(0,i.jsx)(n.h4,{id:"matrix",children:(0,i.jsx)(n.code,{children:"matrix"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for a single matrix permutation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - matrix:\n      GO_VERSION: 1.5\n      REDIS_VERSION: 2.8\n"})}),"\n",(0,i.jsx)(n.h4,{id:"instance",children:(0,i.jsx)(n.code,{children:"instance"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step only on a certain Woodpecker instance matching the specified hostname:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - instance: stage.woodpecker.company.com\n"})}),"\n",(0,i.jsx)(n.h4,{id:"path",children:(0,i.jsx)(n.code,{children:"path"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Path conditions are applied only to ",(0,i.jsx)(n.strong,{children:"push"})," and ",(0,i.jsx)(n.strong,{children:"pull_request"})," events.\nIt is currently ",(0,i.jsx)(n.strong,{children:"only available"})," for GitHub, GitLab and Gitea (version 1.18.0 and newer)"]})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step only on a pipeline with certain files being changed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - path: 'src/*'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.a,{href:"https://github.com/bmatcuk/doublestar#patterns",children:"glob patterns"})," to match the changed files and specify if the step should run if a file matching that pattern has been changed ",(0,i.jsx)(n.code,{children:"include"})," or if some files have ",(0,i.jsx)(n.strong,{children:"not"})," been changed ",(0,i.jsx)(n.code,{children:"exclude"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - path:\n      include: ['.woodpecker/*.yaml', '*.ini']\n      exclude: ['*.md', 'docs/**']\n      ignore_message: '[ALL]'\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Passing a defined ignore-message like ",(0,i.jsx)(n.code,{children:"[ALL]"})," inside the commit message will ignore all path conditions."]})}),"\n",(0,i.jsx)(n.h4,{id:"evaluate",children:(0,i.jsx)(n.code,{children:"evaluate"})}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step only if the provided evaluate expression is equal to true. Both built-in ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/environment#built-in-environment-variables",children:(0,i.jsx)(n.code,{children:"CI_"})})," and custom variables can be used inside the expression."]}),"\n",(0,i.jsxs)(n.p,{children:["The expression syntax can be found in ",(0,i.jsx)(n.a,{href:"https://github.com/expr-lang/expr/blob/master/docs/language-definition.md",children:"the docs"})," of the underlying library."]}),"\n",(0,i.jsxs)(n.p,{children:["Run on pushes to the default branch for the repository ",(0,i.jsx)(n.code,{children:"owner/repo"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'when:\n  - evaluate: \'CI_PIPELINE_EVENT == "push" && CI_REPO == "owner/repo" && CI_COMMIT_BRANCH == CI_REPO_DEFAULT_BRANCH\'\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Run on commits created by user ",(0,i.jsx)(n.code,{children:"woodpecker-ci"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - evaluate: 'CI_COMMIT_AUTHOR == \"woodpecker-ci\"'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Skip all commits containing ",(0,i.jsx)(n.code,{children:"please ignore me"})," in the commit message:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - evaluate: 'not (CI_COMMIT_MESSAGE contains \"please ignore me\")'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Run on pull requests with the label ",(0,i.jsx)(n.code,{children:"deploy"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - evaluate: 'CI_COMMIT_PULL_REQUEST_LABELS contains \"deploy\"'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Skip step only if ",(0,i.jsx)(n.code,{children:"SKIP=true"}),", run otherwise or if undefined:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  - evaluate: 'SKIP != \"true\"'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"depends_on",children:(0,i.jsx)(n.code,{children:"depends_on"})}),"\n",(0,i.jsxs)(n.p,{children:["Normally steps of a workflow are executed serially in the order in which they are defined. As soon as you set ",(0,i.jsx)(n.code,{children:"depends_on"})," for a step a ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Directed_acyclic_graph",children:"directed acyclic graph"})," will be used and all steps of the workflow will be executed in parallel besides the steps that have a dependency set to another step using ",(0,i.jsx)(n.code,{children:"depends_on"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: build # build will be executed immediately\n     image: golang\n     commands:\n       - go build\n\n   - name: deploy\n     image: plugins/docker\n     settings:\n       repo: foo/bar\n+    depends_on: [build, test] # deploy will be executed after build and test finished\n\n   - name: test # test will be executed immediately as no dependencies are set\n     image: golang\n     commands:\n       - go test\n"})}),"\n",(0,i.jsx)(n.h3,{id:"volumes",children:(0,i.jsx)(n.code,{children:"volumes"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker gives the ability to define Docker volumes in the YAML. You can use this parameter to mount files or folders on the host machine into your containers."}),"\n",(0,i.jsxs)(n.p,{children:["For more details check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/volumes",children:"volumes docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"detach",children:(0,i.jsx)(n.code,{children:"detach"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker gives the ability to detach steps to run them in background until the workflow finishes."}),"\n",(0,i.jsxs)(n.p,{children:["For more details check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/services#detachment",children:"service docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"directory",children:(0,i.jsx)(n.code,{children:"directory"})}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"directory"}),", you can set a subdirectory of your repository or an absolute path inside the Docker container in which your commands will run."]}),"\n",(0,i.jsx)(n.h2,{id:"services",children:(0,i.jsx)(n.code,{children:"services"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker can provide service containers. They can for example be used to run databases or cache containers during the execution of workflow."}),"\n",(0,i.jsxs)(n.p,{children:["For more details check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/services",children:"services docs"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"workspace",children:(0,i.jsx)(n.code,{children:"workspace"})}),"\n",(0,i.jsxs)(n.p,{children:["The workspace defines the shared volume and working directory shared by all workflow steps. The default workspace matches the pattern ",(0,i.jsx)(n.code,{children:"/woodpecker/src/github.com/octocat/hello-world"}),", based on your repository URL."]}),"\n",(0,i.jsx)(n.p,{children:"The workspace can be customized using the workspace block in the YAML file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"+workspace:\n+  base: /go\n+  path: src/github.com/octocat/hello-world\n\n steps:\n   - name: build\n     image: golang:latest\n     commands:\n       - go get\n       - go test\n"})}),"\n",(0,i.jsx)(n.p,{children:"The base attribute defines a shared base volume available to all steps. This ensures your source code, dependencies and compiled binaries are persisted and shared between steps."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" workspace:\n+  base: /go\n   path: src/github.com/octocat/hello-world\n\n steps:\n   - name: deps\n     image: golang:latest\n     commands:\n       - go get\n       - go test\n   - name: build\n     image: node:latest\n     commands:\n       - go build\n"})}),"\n",(0,i.jsx)(n.p,{children:"This would be equivalent to the following docker commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker volume create my-named-volume\n\ndocker run --volume=my-named-volume:/go golang:latest\ndocker run --volume=my-named-volume:/go node:latest\n"})}),"\n",(0,i.jsx)(n.p,{children:"The path attribute defines the working directory of your build. This is where your code is cloned and will be the default working directory of every step in your build process. The path must be relative and is combined with your base path."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" workspace:\n   base: /go\n+  path: src/github.com/octocat/hello-world\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/octocat/hello-world \\\n  /go/src/github.com/octocat/hello-world\n"})}),"\n",(0,i.jsx)(n.h2,{id:"matrix-1",children:(0,i.jsx)(n.code,{children:"matrix"})}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker has integrated support for matrix builds. Woodpecker executes a separate build task for each combination in the matrix, allowing you to build and test a single commit against multiple configurations."}),"\n",(0,i.jsxs)(n.p,{children:["For more details check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/matrix-workflows",children:"matrix build docs"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"labels",children:(0,i.jsx)(n.code,{children:"labels"})}),"\n",(0,i.jsxs)(n.p,{children:["You can set labels for your workflow to select an agent to execute the workflow on. An agent will pick up and run a workflow when ",(0,i.jsx)(n.strong,{children:"every"})," label assigned to it matches the agents labels."]}),"\n",(0,i.jsxs)(n.p,{children:["To set additional agent labels check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/administration/agent-config#woodpecker_filter_labels",children:"agent configuration options"}),". Agents will have at least four default labels: ",(0,i.jsx)(n.code,{children:"platform=agent-os/agent-arch"}),", ",(0,i.jsx)(n.code,{children:"hostname=my-agent"}),", ",(0,i.jsx)(n.code,{children:"backend=docker"})," (type of the agent backend) and ",(0,i.jsx)(n.code,{children:"repo=*"}),". Agents can use a ",(0,i.jsx)(n.code,{children:"*"})," as a wildcard for a label. For example ",(0,i.jsx)(n.code,{children:"repo=*"})," will match every repo."]}),"\n",(0,i.jsxs)(n.p,{children:["Workflow labels with an empty value will be ignored.\nBy default each workflow has at least the ",(0,i.jsx)(n.code,{children:"repo=your-user/your-repo-name"})," label. If you have set the ",(0,i.jsx)(n.a,{href:"#platform",children:"platform attribute"})," for your workflow it will have a label like ",(0,i.jsx)(n.code,{children:"platform=your-os/your-arch"})," as well."]}),"\n",(0,i.jsx)(n.p,{children:"You can add additional labels as a key value map:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'+labels:\n+  location: europe # only agents with `location=europe` or `location=*` will be used\n+  weather: sun\n+  hostname: "" # this label will be ignored as it is empty\n\n steps:\n   - name: build\n     image: golang\n     commands:\n       - go build\n       - go test\n'})}),"\n",(0,i.jsx)(n.h3,{id:"filter-by-platform",children:"Filter by platform"}),"\n",(0,i.jsxs)(n.p,{children:["To configure your workflow to only be executed on an agent with a specific platform, you can use the ",(0,i.jsx)(n.code,{children:"platform"})," key.\nHave a look at the official ",(0,i.jsx)(n.a,{href:"https://go.dev/doc/install/source",children:"go docs"})," for the available platforms. The syntax of the platform is ",(0,i.jsx)(n.code,{children:"GOOS/GOARCH"})," like ",(0,i.jsx)(n.code,{children:"linux/arm64"})," or ",(0,i.jsx)(n.code,{children:"linux/amd64"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.p,{children:["Assuming we have two agents, one ",(0,i.jsx)(n.code,{children:"linux/arm"})," and one ",(0,i.jsx)(n.code,{children:"linux/amd64"}),". Previously this workflow would have executed on ",(0,i.jsx)(n.strong,{children:"either agent"}),", as Woodpecker is not fussy about where it runs the workflows. By setting the following option it will only be executed on an agent with the platform ",(0,i.jsx)(n.code,{children:"linux/arm64"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"+labels:\n+  platform: linux/arm64\n\n steps:\n   [...]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:(0,i.jsx)(n.code,{children:"variables"})}),"\n",(0,i.jsxs)(n.p,{children:["Woodpecker supports using ",(0,i.jsx)(n.a,{href:"https://yaml.org/spec/1.2.2/#3222-anchors-and-aliases",children:"YAML anchors & aliases"})," as variables in the workflow configuration."]}),"\n",(0,i.jsxs)(n.p,{children:["For more details and examples check the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/advanced-usage",children:"Advanced usage docs"})]}),"\n",(0,i.jsx)(n.h2,{id:"clone",children:(0,i.jsx)(n.code,{children:"clone"})}),"\n",(0,i.jsxs)(n.p,{children:["Woodpecker automatically configures a default clone step if not explicitly defined. When using the ",(0,i.jsx)(n.code,{children:"local"})," backend, the ",(0,i.jsx)(n.a,{href:"https://github.com/woodpecker-ci/plugin-git",children:"plugin-git"})," binary must be on your ",(0,i.jsx)(n.code,{children:"$PATH"})," for the default clone step to work. If not, you can still write a manual clone step."]}),"\n",(0,i.jsx)(n.p,{children:"You can manually configure the clone step in your workflow for customization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"+clone:\n+  git:\n+    image: woodpeckerci/plugin-git\n\n steps:\n   - name: build\n     image: golang\n     commands:\n       - go build\n       - go test\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example configuration to override depth:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" clone:\n   - name: git\n     image: woodpeckerci/plugin-git\n+    settings:\n+      partial: false\n+      depth: 50\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example configuration to use a custom clone plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" clone:\n   git:\n+    image: octocat/custom-git-plugin\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example configuration to clone Mercurial repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" clone:\n   - name: hg\n+    image: plugins/hg\n+    settings:\n+      path: bitbucket.org/foo/bar\n"})}),"\n",(0,i.jsx)(n.h3,{id:"git-submodules",children:"Git Submodules"}),"\n",(0,i.jsxs)(n.p,{children:["To use the credentials that cloned the repository to clone it's submodules, update ",(0,i.jsx)(n.code,{children:".gitmodules"})," to use ",(0,i.jsx)(n.code,{children:"https"})," instead of ",(0,i.jsx)(n.code,{children:"git"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:' [submodule "my-module"]\n path = my-module\n-url = git@github.com:octocat/my-module.git\n+url = https://github.com/octocat/my-module.git\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To use the ssh git url in ",(0,i.jsx)(n.code,{children:".gitmodules"})," for users cloning with ssh, and also use the https url in Woodpecker, add ",(0,i.jsx)(n.code,{children:"submodule_override"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" clone:\n   - name: git\n     image: woodpeckerci/plugin-git\n     settings:\n       recursive: true\n+      submodule_override:\n+        my-module: https://github.com/octocat/my-module.git\n\nsteps:\n  ...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"skip_clone",children:(0,i.jsx)(n.code,{children:"skip_clone"})}),"\n",(0,i.jsxs)(n.p,{children:["By default Woodpecker is automatically adding a clone step. This clone step can be configured by the ",(0,i.jsx)(n.a,{href:"#clone",children:"clone"})," property. If you do not need a ",(0,i.jsx)(n.code,{children:"clone"})," step at all you can skip it using:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"skip_clone: true\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"when---global-workflow-conditions",children:[(0,i.jsx)(n.code,{children:"when"})," - Global workflow conditions"]}),"\n",(0,i.jsxs)(n.p,{children:["Woodpecker gives the ability to skip whole workflows (not just steps #when---conditional-execution-1) based on certain conditions by a ",(0,i.jsx)(n.code,{children:"when"})," block. If all conditions in the ",(0,i.jsx)(n.code,{children:"when"})," block evaluate to true the workflow is executed, otherwise it is skipped, but treated as successful and other workflows depending on it will still continue."]}),"\n",(0,i.jsx)(n.h3,{id:"repo-1",children:(0,i.jsx)(n.code,{children:"repo"})}),"\n",(0,i.jsx)(n.p,{children:"Example conditional execution by repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"+when:\n+  repo: test/test\n+\n steps:\n   - name: slack\n     image: plugins/slack\n     settings:\n       channel: dev\n"})}),"\n",(0,i.jsx)(n.h3,{id:"branch-1",children:(0,i.jsx)(n.code,{children:"branch"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Branch conditions are not applied to tags."})}),"\n",(0,i.jsx)(n.p,{children:"Example conditional execution by branch:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"+when:\n+  branch: main\n+\n steps:\n   - name: slack\n     image: plugins/slack\n     settings:\n       channel: dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The step now triggers on ",(0,i.jsx)(n.code,{children:"main"}),", but also if the target branch of a pull request is ",(0,i.jsx)(n.code,{children:"main"}),". Add an event condition to limit it further to pushes on main only."]}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the branch is ",(0,i.jsx)(n.code,{children:"main"})," or ",(0,i.jsx)(n.code,{children:"develop"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  branch: [main, develop]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the branch starts with ",(0,i.jsx)(n.code,{children:"prefix/*"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  branch: prefix/*\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step using custom include and exclude logic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  branch:\n    include: [main, release/*]\n    exclude: [release/1.0.0, release/1.1.*]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-1",children:(0,i.jsx)(n.code,{children:"event"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Some events like the release event will be triggered for multiple actions like: releases, pre-releases and drafts. If you want to apply further filters checkout the ",(0,i.jsx)(n.a,{href:"#evaluate",children:"evaluate"})," filter and the available ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/environment#built-in-environment-variables",children:"environment variables"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the build event is a ",(0,i.jsx)(n.code,{children:"tag"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  event: tag\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Execute a step if the pipeline event is a ",(0,i.jsx)(n.code,{children:"push"})," to a specified branch:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" when:\n   event: push\n+  branch: main\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for all non-pull request events:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  event: [push, tag, deployment]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for all build events:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  event: [push, pull_request, pull_request_closed, tag, deployment, release]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ref-1",children:(0,i.jsx)(n.code,{children:"ref"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ref"})," filter compares the git reference against which the pipeline is executed.\nThis allows you to filter, for example, tags that must start with ",(0,i.jsx)(n.strong,{children:"v"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  event: tag\n  ref: refs/tags/v*\n"})}),"\n",(0,i.jsx)(n.h3,{id:"environment-2",children:(0,i.jsx)(n.code,{children:"environment"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step for deployment events matching the target deployment environment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  environment: production\n  event: deployment\n"})}),"\n",(0,i.jsx)(n.h3,{id:"instance-1",children:(0,i.jsx)(n.code,{children:"instance"})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step only on a certain Woodpecker instance matching the specified hostname:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  instance: stage.woodpecker.company.com\n"})}),"\n",(0,i.jsx)(n.h3,{id:"path-1",children:(0,i.jsx)(n.code,{children:"path"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Path conditions are applied only to ",(0,i.jsx)(n.strong,{children:"push"})," and ",(0,i.jsx)(n.strong,{children:"pull_request"})," events.\nIt is currently ",(0,i.jsx)(n.strong,{children:"only available"})," for GitHub, GitLab and Gitea (version 1.18.0 and newer)"]})}),"\n",(0,i.jsx)(n.p,{children:"Execute a step only on a pipeline with certain files being changed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  path: 'src/*'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.a,{href:"https://github.com/bmatcuk/doublestar#patterns",children:"glob patterns"})," to match the changed files and specify if the step should run if a file matching that pattern has been changed ",(0,i.jsx)(n.code,{children:"include"})," or if some files have ",(0,i.jsx)(n.strong,{children:"not"})," been changed ",(0,i.jsx)(n.code,{children:"exclude"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"when:\n  path:\n    include: ['.woodpecker/*.yaml', '*.ini']\n    exclude: ['*.md', 'docs/**']\n    ignore_message: '[ALL]'\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Passing a defined ignore-message like ",(0,i.jsx)(n.code,{children:"[ALL]"})," inside the commit message will ignore all path conditions."]})}),"\n",(0,i.jsx)(n.h2,{id:"depends_on-1",children:(0,i.jsx)(n.code,{children:"depends_on"})}),"\n",(0,i.jsxs)(n.p,{children:["Woodpecker supports to define multiple workflows for a repository. Those workflows will run independent from each other. To depend them on each other you can use the ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/workflows#flow-control",children:(0,i.jsx)(n.code,{children:"depends_on"})})," keyword."]}),"\n",(0,i.jsx)(n.h2,{id:"runs_on",children:(0,i.jsx)(n.code,{children:"runs_on"})}),"\n",(0,i.jsxs)(n.p,{children:["Workflows that should run even on failure should set the ",(0,i.jsx)(n.code,{children:"runs_on"})," tag. See ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/workflows#flow-control",children:"here"})," for an example."]}),"\n",(0,i.jsx)(n.h2,{id:"privileged-mode",children:"Privileged mode"}),"\n",(0,i.jsx)(n.p,{children:"Woodpecker gives the ability to configure privileged mode in the YAML. You can use this parameter to launch containers with escalated capabilities."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Privileged mode is only available to trusted repositories and for security reasons should only be used in private environments. See ",(0,i.jsx)(n.a,{href:"/docs/2.3/usage/project-settings#trusted",children:"project settings"})," to enable trusted mode."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:" steps:\n   - name: build\n     image: docker\n     environment:\n       - DOCKER_HOST=tcp://docker:2375\n     commands:\n       - docker --tls=false ps\n\n - name: services\n   docker:\n     image: docker:dind\n     commands: dockerd-entrypoint.sh --storage-driver=vfs --tls=false\n+    privileged: true\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},74169:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(79474);const l={},o=i.createContext(l);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);