"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([["5490"],{22258:function(e,n,i){i.r(n),i.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return c},frontMatter:function(){return o},metadata:function(){return t},toc:function(){return g}});var t=i(33768),r=i(96773),s=i(46186);let o={title:"[Community] Podman image build with sigstore",description:"Build images in Podman with sigstore signature checking and signing",slug:"podman-image-build-sigstore",authors:[{name:"handlebargh",url:"https://github.com/handlebargh",image_url:"https://github.com/handlebargh.png"}],hide_table_of_contents:!1,tags:["community","image","podman","sigstore","signature"]},a=void 0,l={authorsImageUrls:[void 0]},g=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Generate signing keypair",id:"generate-signing-keypair",level:3},{value:"Configure hosts pulling the resulting image",id:"configure-hosts-pulling-the-resulting-image",level:3},{value:"Repository structure",id:"repository-structure",level:2},{value:"Containerfile",id:"containerfile",level:3},{value:"Woodpecker workflow",id:"woodpecker-workflow",level:3}];function u(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This example shows how to build a container image with podman while verifying the base image and signing the resulting image."}),"\n",(0,r.jsx)(n.p,{children:"The image being pulled uses a keyless signature, while the image being built will be signed by a pre-generated private key."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"generate-signing-keypair",children:"Generate signing keypair"}),"\n",(0,r.jsx)(n.p,{children:"You can use cosing or skopeo to generate the keypair."}),"\n",(0,r.jsx)(n.p,{children:"Using skopeo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"skopeo generate-sigstore-key --output-prefix myKey\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This command will generate a ",(0,r.jsx)(n.code,{children:"myKey.private"})," and a ",(0,r.jsx)(n.code,{children:"myKey.pub"})," keyfile."]}),"\n",(0,r.jsxs)(n.p,{children:["Store the ",(0,r.jsx)(n.code,{children:"myKey.private"})," as secret in Woodpecker. In the example below, the secret is called ",(0,r.jsx)(n.code,{children:"sigstore_private_key"})]}),"\n",(0,r.jsx)(n.h3,{id:"configure-hosts-pulling-the-resulting-image",children:"Configure hosts pulling the resulting image"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/building_running_and_managing_containers/assembly_signing-container-images_building-running-and-managing-containers#proc_verifying-sigstore-image-signatures-using-a-public-key_assembly_signing-container-images",children:"here"})," on how to configure the hosts pulling the built and signed image."]}),"\n",(0,r.jsx)(n.h2,{id:"repository-structure",children:"Repository structure"}),"\n",(0,r.jsxs)(n.p,{children:["Consider the ",(0,r.jsx)(n.code,{children:"Makefile"})," having a ",(0,r.jsx)(n.code,{children:"build"})," target that will be used in the following workflow.\nThis target yields a Go binary with the filename ",(0,r.jsx)(n.code,{children:"app"})," that will be placed in the root directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".\n\u251C\u2500\u2500 Containerfile\n\u251C\u2500\u2500 main.go\n\u251C\u2500\u2500 go.mod\n\u251C\u2500\u2500 go.sum\n\u251C\u2500\u2500 .woodpecker.yml\n\u2514\u2500\u2500 Makefile\n"})}),"\n",(0,r.jsx)(n.h3,{id:"containerfile",children:"Containerfile"}),"\n",(0,r.jsx)(n.p,{children:"The Containerfile refers to the base image that will be verified when pulled."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'FROM gcr.io/distroless/static-debian12:nonroot\nCOPY app /app\nCMD ["/app"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"woodpecker-workflow",children:"Woodpecker workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'steps:\n  build:\n    image: docker.io/library/golang:1.21\n    pull: true\n    commands:\n      - make build\n\n  publish:\n    image: quay.io/podman/stable:latest\n    # Caution: This image is built daily. It might fill up your image store quickly.\n    pull: true\n    # Fill in the trusted checkbox in Woodpecker\'s settings as well\n    privileged: true\n    commands:\n      # Configure podman to use sigstore attachments for both, the registry you pull from and the registry you push to.\n      - |\n        printf "docker:\n          registry.gitlab.com:\n            use-sigstore-attachments: true\n          gcr.io:\n            use-sigstore-attachments: true" >> /etc/containers/registries.d/default.yaml\n\n      # At pull, check the keyless sigstore signature of the distroless image.\n      # This is a very strict container policy. It allows pulling from gcr.io/distroless only. Every other registry will be rejected.\n      # See https://github.com/containers/image/blob/main/docs/containers-policy.json.5.md for more information.\n\n      # fulcio CA crt obtained from https://github.com/sigstore/sigstore/blob/main/pkg/tuf/repository/targets/fulcio_v1.crt.pem\n      # rekor public key obtained from https://github.com/sigstore/sigstore/blob/main/pkg/tuf/repository/targets/rekor.pub\n      # crt/key data is base64 encoded. --\x3e echo "$CERT" | base64\n      - |\n        printf \'{\n            "default": [\n              {\n                "type": "reject"\n              }\n            ],\n            "transports": {\n              "docker": {\n                "gcr.io/distroless": [\n                  {\n                    "type": "sigstoreSigned",\n                    "fulcio": {\n                      "caData": "LS0tLS1CRUdJTiBDR...QVRFLS0tLS0K",\n                      "oidcIssuer": "https://accounts.google.com",\n                      "subjectEmail": "keyless@distroless.iam.gserviceaccount.com"\n                    },\n                    "rekorPublicKeyData": "LS0tLS1CRUdJTiBQVUJ...lDIEtFWS0tLS0tCg==",\n                    "signedIdentity": { "type": "matchRepository" }\n                  }\n                ]\n              },\n              "docker-daemon": {\n                "": [\n                  {\n                    "type": "reject"\n                  }\n                ]\n              }\n            }\n          }\' > /etc/containers/policy.json\n\n      # Use this key to sign the built image at push.\n      - echo "$SIGSTORE_PRIVATE_KEY" > key.private\n      # Login at the registry\n      - echo $REGISTRY_LOGIN_TOKEN | podman login -u <username> --password-stdin registry.gitlab.com\n      # Build the container image\n      - podman build --tag registry.gitlab.com/<namespace>/<repository_name>/<image_name>:latest .\n      # Sign and push the image\n      - podman push --sign-by-sigstore-private-key ./key.private registry.gitlab.com/<namespace>/<repository_name>/<image_name>:latest\n\n    secrets: [sigstore_private_key, registry_login_token]\n'})})]})}function c(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},46186:function(e,n,i){i.d(n,{Z:function(){return a},a:function(){return o}});var t=i(41699);let r={},s=t.createContext(r);function o(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},33768:function(e){e.exports=JSON.parse('{"permalink":"/blog/podman-image-build-sigstore","source":"@site/blog/2023-12-15-podman-sigstore/index.md","title":"[Community] Podman image build with sigstore","description":"Build images in Podman with sigstore signature checking and signing","date":"2023-12-15T00:00:00.000Z","tags":[{"inline":true,"label":"community","permalink":"/blog/tags/community"},{"inline":true,"label":"image","permalink":"/blog/tags/image"},{"inline":true,"label":"podman","permalink":"/blog/tags/podman"},{"inline":true,"label":"sigstore","permalink":"/blog/tags/sigstore"},{"inline":true,"label":"signature","permalink":"/blog/tags/signature"}],"readingTime":2.29,"hasTruncateMarker":true,"authors":[{"name":"handlebargh","url":"https://github.com/handlebargh","image_url":"https://github.com/handlebargh.png","imageURL":"https://github.com/handlebargh.png","socials":{},"key":null,"page":null}],"frontMatter":{"title":"[Community] Podman image build with sigstore","description":"Build images in Podman with sigstore signature checking and signing","slug":"podman-image-build-sigstore","authors":[{"name":"handlebargh","url":"https://github.com/handlebargh","image_url":"https://github.com/handlebargh.png","imageURL":"https://github.com/handlebargh.png"}],"hide_table_of_contents":false,"tags":["community","image","podman","sigstore","signature"]},"unlisted":false,"prevItem":{"title":"[Community] Continuous Deployment","permalink":"/blog/continuous-deployment"},"nextItem":{"title":"[Community] Debug pipeline steps","permalink":"/blog/debug-pipeline-steps"}}')}}]);