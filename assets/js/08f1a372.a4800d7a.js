"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[2652],{52350:e=>{e.exports=JSON.parse('{"name":"Kubernetes Deployment or StatefulSet Update","url":"https://github.com/euryecetelecom/woodpeckerci-kubernetes","description":"Update a Kubernetes deployment or statefulset","docs":"<h1>Kubernetes plugin for Woodpecker-CI</h1>\\n<p>This plugin allows to update a Kubernetes deployment or statefulset.</p>\\n<h2>Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Setting Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>kubernetes_server</code></td>\\n<td><em>none</em></td>\\n<td>Kubernetes server to target (ex: <a href=\\"https://mykubernetes.example.com\\">https://mykubernetes.example.com</a>) - mandatory</td>\\n</tr>\\n<tr>\\n<td><code>kubernetes_token</code></td>\\n<td><em>none</em></td>\\n<td>Kubernetes token to use (cf Generating secrets) - mandatory / B64 encoded</td>\\n</tr>\\n<tr>\\n<td><code>kubernetes_cert</code></td>\\n<td><em>none</em></td>\\n<td>Kubernetes certificate to use (cf Generating secrets) / B64 encoded</td>\\n</tr>\\n<tr>\\n<td><code>kubernetes_user</code></td>\\n<td><code>default</code></td>\\n<td>Kubernetes user to use</td>\\n</tr>\\n<tr>\\n<td><code>deployment</code></td>\\n<td><em>none</em></td>\\n<td>Deployment(s) to update - at least 1 deployment or statefulset are mandatory</td>\\n</tr>\\n<tr>\\n<td><code>statefulset</code></td>\\n<td><em>none</em></td>\\n<td>StatefulSet(s) to update - at least 1 deployment or statefulset are mandatory</td>\\n</tr>\\n<tr>\\n<td><code>namespace</code></td>\\n<td><code>default</code></td>\\n<td>Deployment or StatefulSet namespace</td>\\n</tr>\\n<tr>\\n<td><code>repo</code></td>\\n<td><em>none</em></td>\\n<td>Repository containing the image to pull from (ex: myrepo.example.com/project/image) - mandatory</td>\\n</tr>\\n<tr>\\n<td><code>container</code></td>\\n<td><em>none</em></td>\\n<td>Container(s) to update with the image - mandatory</td>\\n</tr>\\n<tr>\\n<td><code>tag</code></td>\\n<td><em>none</em></td>\\n<td>Image tag to pull from - mandatory</td>\\n</tr>\\n<tr>\\n<td><code>wait</code></td>\\n<td><em>none</em></td>\\n<td>Wait for update to be applied (ex: true)</td>\\n</tr>\\n<tr>\\n<td><code>wait_timeout</code></td>\\n<td><code>30s</code></td>\\n<td>Wait timeout</td>\\n</tr>\\n<tr>\\n<td><code>force</code></td>\\n<td><em>none</em></td>\\n<td>Force pull the new image, to ensure an image with the same tag is updated (ex: true)</td>\\n</tr>\\n</tbody></table>\\n<h2>Usage</h2>\\n<h3>Update a container from one Deployment</h3>\\n<p>This pipeline will update the <code>my-deployment</code> deployment with the image tagged <code>CI_COMMIT_SHA</code></p>\\n<pre><code class=\\"language-yaml\\">    deploy:\\n        image: euryecetelecom/woodpeckerci-kubernetes\\n        settings:\\n            kubernetes_server:\\n                from_secret: kubernetes_server\\n            kubernetes_token:\\n                from_secret: kubernetes_token\\n            kubernetes_cert:\\n                from_secret: kubernetes_cert\\n            namespace: default\\n            deployment: my-deployment\\n            repo: myorg/myrepo\\n            container: my-container\\n            tag: ${CI_COMMIT_BRANCH}\\n        secrets:\\n            - kubernetes_cert\\n            - kubernetes_server\\n            - kubernetes_token\\n</code></pre>\\n<h3>Update a container from one StatefulSet</h3>\\n<p>This pipeline will update the <code>my-statefulset</code> statefulset with the image tagged <code>CI_COMMIT_SHA</code></p>\\n<pre><code class=\\"language-yaml\\">    deploy:\\n        image: euryecetelecom/woodpeckerci-kubernetes\\n        settings:\\n            kubernetes_server:\\n                from_secret: kubernetes_server\\n            kubernetes_token:\\n                from_secret: kubernetes_token\\n            kubernetes_cert:\\n                from_secret: kubernetes_cert\\n            namespace: default\\n            statefulset: my-statefulset\\n            repo: myorg/myrepo\\n            container: my-container\\n            tag: ${CI_COMMIT_BRANCH}\\n        secrets:\\n            - kubernetes_cert\\n            - kubernetes_server\\n            - kubernetes_token\\n</code></pre>\\n<h3>Update a container from one Deployment, force rollout and wait for it</h3>\\n<p>This pipeline will update the <code>my-deployment</code> deployment with the image tagged <code>CI_COMMIT_SHA</code>, force rollout and wait 300s (default is 30s) for it to be ready. This helps to ensure the next pipeline step is based on the deployed container - for automatic testing purposes for example.</p>\\n<pre><code class=\\"language-yaml\\">    deploy:\\n        image: euryecetelecom/woodpeckerci-kubernetes\\n        settings:\\n            kubernetes_server:\\n                from_secret: kubernetes_server\\n            kubernetes_token:\\n                from_secret: kubernetes_token\\n            kubernetes_cert:\\n                from_secret: kubernetes_cert\\n            namespace: default\\n            wait: true\\n            wait_timeout: 60s\\n            force: true\\n            deployment: my-deployment\\n            repo: myorg/myrepo\\n            container: my-container\\n            tag: ${CI_COMMIT_BRANCH}\\n        secrets:\\n            - kubernetes_cert\\n            - kubernetes_server\\n            - kubernetes_token\\n</code></pre>\\n<h3>Update a container from several Deployments</h3>\\n<p>Deploying containers across several deployments, eg in a scheduler-worker setup. Make sure your container <code>name</code> in your manifest is the same for each pod.</p>\\n<pre><code class=\\"language-yaml\\">    deploy:\\n        image: euryecetelecom/woodpeckerci-kubernetes\\n        settings:\\n            kubernetes_server:\\n                from_secret: kubernetes_server\\n            kubernetes_token:\\n                from_secret: kubernetes_token\\n            kubernetes_cert:\\n                from_secret: kubernetes_cert\\n            namespace: default\\n            deployment: [server-deploy, worker-deploy]\\n            repo: myorg/myrepo\\n            container: my-container\\n            tag: ${CI_COMMIT_BRANCH}\\n        secrets:\\n            - kubernetes_cert\\n            - kubernetes_server\\n            - kubernetes_token\\n</code></pre>\\n<h3>Update multiple container from a Deployment</h3>\\n<p>Deploying multiple containers within the same deployment.</p>\\n<pre><code class=\\"language-yaml\\">    deploy:\\n        image: euryecetelecom/woodpeckerci-kubernetes\\n        settings:\\n            kubernetes_server:\\n                from_secret: kubernetes_server\\n            kubernetes_token:\\n                from_secret: kubernetes_token\\n            kubernetes_cert:\\n                from_secret: kubernetes_cert\\n            namespace: default\\n            deployment: my-deployment\\n            repo: myorg/myrepo\\n            container: [container1, container2]\\n            tag: ${CI_COMMIT_BRANCH}\\n        secrets:\\n            - kubernetes_cert\\n            - kubernetes_server\\n            - kubernetes_token\\n</code></pre>\\n<h3>TODO: To be tested - multiple containers from multiple deployments</h3>\\n<h2>Required secrets</h2>\\n<pre><code class=\\"language-bash\\">    woodpecker-cli secret add --image=infras/woodpeckerci-kubernetes \\\\\\n        your-org/your-repo KUBERNETES_SERVER https://mykubernetesapiserver\\n\\n    woodpecker-cli secret add --image=infras/woodpeckerci-kubernetes \\\\\\n        your-org/your-repo KUBERNETES_CERT &lt;base64 encoded CA.crt&gt;\\n\\n    woodpecker-cli secret add --image=infras/woodpeckerci-kubernetes \\\\\\n        your-org/your-repo KUBERNETES_TOKEN eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJ...\\n</code></pre>\\n<p>When using TLS Verification, ensure Server Certificate used by kubernetes API server \\nis signed for SERVER url ( could be a reason for failures if using aliases of kubernetes cluster )</p>\\n<h2>Generating secrets - RBAC</h2>\\n<p>When using a version of kubernetes with RBAC (role-based access control)\\nenabled, you will not be able to use the default service account, since it does\\nnot have access to update deployments.  Instead, you will need to create a\\ncustom service account with the appropriate permissions (<code>Role</code> and <code>RoleBinding</code>, or <code>ClusterRole</code> and <code>ClusterRoleBinding</code> if you need access across namespaces using the same service account).</p>\\n<p>As an example (for the <code>default</code> namespace):</p>\\n<pre><code class=\\"language-yaml\\">apiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: cicd-deploy\\n  namespace: default\\nautomountServiceAccountToken: true\\n\\n---\\n\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: Role\\nmetadata:\\n  name: cicd-deploy\\n  namespace: default\\nrules:\\n  - apiGroups: [\\"apps\\"]\\n    resources: [\\"deployments\\"]\\n    verbs: [\\"get\\",\\"list\\",\\"patch\\",\\"update\\", \\"watch\\"]\\n\\n---\\n\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: RoleBinding\\nmetadata:\\n  name: cicd-deploy\\n  namespace: default\\nsubjects:\\n  - kind: ServiceAccount\\n    name: cicd-deploy\\n    namespace: default\\nroleRef:\\n  kind: Role\\n  name: cicd-deploy\\n  apiGroup: rbac.authorization.k8s.io\\n\\n---\\n\\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: cicd-deploy-secret\\n  namespace: default\\n  annotations:\\n    kubernetes.io/service-account.name: cicd-deploy\\ntype: kubernetes.io/service-account-token\\n</code></pre>\\n<p>Once the service account is created, you can extract the <code>ca.cert</code> and <code>token</code>\\nparameters as mentioned for the default service account above:</p>\\n<pre><code>kubectl -n default get secret/cicd-deploy-secret -o yaml | egrep \'ca.crt:|token:\'\\n</code></pre>\\n<h2>Improvements / Ideas</h2>\\n<p>Replace the current kubectl bash script with a go implementation.</p>\\n","tags":["deploy","kubernetes","deployment","container","statefulset"],"author":"EuryeceTelecom","containerImage":"euryecetelecom/woodpeckerci-kubernetes","containerImageUrl":"https://hub.docker.com/r/euryecetelecom/woodpeckerci-kubernetes","verified":false}')}}]);