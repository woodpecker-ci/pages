"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[8272],{80123:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=o(13274),n=o(74169);const i={},t="Terminology",l={id:"usage/terminiology/index",title:"Terminology",description:"Woodpecker architecture",source:"@site/versioned_docs/version-2.0/20-usage/15-terminiology/index.md",sourceDirName:"20-usage/15-terminiology",slug:"/usage/terminiology/",permalink:"/docs/2.0/usage/terminiology/",draft:!1,unlisted:!1,editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/versioned_docs/version-2.0/20-usage/15-terminiology/index.md",tags:[],version:"2.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/2.0/usage/intro"},next:{title:"Workflow syntax",permalink:"/docs/2.0/usage/workflow-syntax"}},c={},d=[{value:"Woodpecker architecture",id:"woodpecker-architecture",level:2},{value:"Pipeline, workflow &amp; step",id:"pipeline-workflow--step",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Conventions",id:"conventions",level:2}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"terminology",children:"Terminology"}),"\n",(0,r.jsx)(s.h2,{id:"woodpecker-architecture",children:"Woodpecker architecture"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Woodpecker architecture",src:o(70299).A+"",width:"1283",height:"780"})}),"\n",(0,r.jsx)(s.h2,{id:"pipeline-workflow--step",children:"Pipeline, workflow & step"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Relation between pipelines, workflows and steps",src:o(63145).A+"",width:"1074",height:"520"})}),"\n",(0,r.jsx)(s.h2,{id:"glossary",children:"Glossary"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Woodpecker CI"}),": The project name around Woodpecker."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Woodpecker"}),": An open-source tool that executes ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflow-syntax",children:"pipelines"})," on your code."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Server"}),": The component of Woodpecker that handles webhooks from forges, orchestrates agents, and sends status back. It also serves the API and web UI for administration and configuration."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Agent"}),": A component of Woodpecker that executes ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflow-syntax",children:"pipelines"})," (specifically one or more ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflows"}),") with a specific backend (e.g. ",(0,r.jsx)(s.a,{href:"/docs/2.0/administration/backends/docker",children:"Docker"}),", Kubernetes, ",(0,r.jsx)(s.a,{href:"/docs/2.0/administration/backends/local",children:"local"}),"). It connects to the server via GRPC."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"CLI"}),": The Woodpecker command-line interface (CLI) is a terminal tool used to administer the server, to execute pipelines locally for debugging / testing purposes, and to perform tasks like linting pipelines."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pipeline"}),": A sequence of ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflows"})," that are executed on the code. ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflow-syntax",children:"Pipelines"})," are triggered by events."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Workflow"}),": A sequence of steps and services that are executed as part of a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflow-syntax",children:"pipeline"}),". Workflows are represented by YAML files. Each ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"})," has its own isolated ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflow-syntax#workspace",children:"workspace"}),", and often additional resources like a shared network (docker)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Steps"}),": Individual commands, actions or tasks within a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Code"}),": Refers to the files tracked by the version control system used by the ",(0,r.jsx)(s.a,{href:"/docs/2.0/administration/forges/overview",children:"forge"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Repos"}),": Short for repositories, these are storage locations where code is stored."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Forge"}),": The hosting platform or service where the repositories are hosted."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Workspace"}),": A folder shared between all steps of a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"})," containing the repository and all the generated data from previous steps."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Event"}),": Triggers the execution of a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflow-syntax",children:"pipeline"}),", such as a ",(0,r.jsx)(s.a,{href:"/docs/2.0/administration/forges/overview",children:"forge"})," event like ",(0,r.jsx)(s.code,{children:"push"}),", or ",(0,r.jsx)(s.code,{children:"manual"})," triggered manually from the UI."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Commit"}),": A defined state of the code, usually associated with a version control system like Git."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Matrix"}),": A configuration option that allows the execution of ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflows"})," for each value in the ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/matrix-workflows",children:"matrix"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Service"}),": A service is a step that is executed from the start of a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"})," until its end. It can be accessed by name via the network from other steps within the same ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Plugins"}),": ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/plugins/plugins",children:"Plugins"})," are extensions that provide pre-defined actions or commands for a step in a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"}),". They can be configured via settings."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Container"}),": A lightweight and isolated environment where commands are executed."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"YAML File"}),": A file format used to define and configure ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflows"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Dependency"}),": ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"Workflows"})," can depend on each other, and if possible, they are executed in parallel."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Status"}),": Status refers to the outcome of a step or ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"})," after it has been executed, determined by the internal command exit code. At the end of a ",(0,r.jsx)(s.a,{href:"/docs/2.0/usage/workflows",children:"workflow"}),", its status is sent to the ",(0,r.jsx)(s.a,{href:"/docs/2.0/administration/forges/overview",children:"forge"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"conventions",children:"Conventions"}),"\n",(0,r.jsx)(s.p,{children:"Sometimes there are multiple terms that can be used to describe something. This section lists the preferred terms to use in Woodpecker:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Environment variables ",(0,r.jsx)(s.code,{children:"*_LINK"})," should be called ",(0,r.jsx)(s.code,{children:"*_URL"}),". In the code use ",(0,r.jsx)(s.code,{children:"URL()"})," instead of ",(0,r.jsx)(s.code,{children:"Link()"})]}),"\n",(0,r.jsxs)(s.li,{children:["Use the term ",(0,r.jsx)(s.strong,{children:"pipelines"})," instead of the previous ",(0,r.jsx)(s.strong,{children:"builds"})]}),"\n",(0,r.jsxs)(s.li,{children:["Use the term ",(0,r.jsx)(s.strong,{children:"steps"})," instead of the previous ",(0,r.jsx)(s.strong,{children:"jobs"})]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},70299:(e,s,o)=>{o.d(s,{A:()=>r});const r=o.p+"assets/images/architecture-f5d5b825eacf303d3080d73a2c641bdd.svg"},63145:(e,s,o)=>{o.d(s,{A:()=>r});const r=o.p+"assets/images/pipeline-workflow-step-3f557a68039086cd959e6106d7846abb.svg"},74169:(e,s,o)=>{o.d(s,{R:()=>t,x:()=>l});var r=o(79474);const n={},i=r.createContext(n);function t(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);