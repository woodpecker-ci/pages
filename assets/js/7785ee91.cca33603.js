"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[3576],{86792:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var t=o(13274),i=o(71377);const s={title:"Continuous Deployment",description:"Deploy your artifacts to an app server",slug:"continuous-deployment",authors:[{name:"lonix1",url:"https://github.com/lonix1",image_url:"https://github.com/lonix1.png"}],hide_table_of_contents:!1},a=void 0,r={permalink:"/cookbook/continuous-deployment",source:"@site/cookbook/2024-1-1-continous-deployment/index.md",title:"Continuous Deployment",description:"Deploy your artifacts to an app server",date:"2024-01-01T00:00:00.000Z",formattedDate:"January 1, 2024",tags:[],readingTime:1.87,hasTruncateMarker:!0,authors:[{name:"lonix1",url:"https://github.com/lonix1",image_url:"https://github.com/lonix1.png",imageURL:"https://github.com/lonix1.png"}],frontMatter:{title:"Continuous Deployment",description:"Deploy your artifacts to an app server",slug:"continuous-deployment",authors:[{name:"lonix1",url:"https://github.com/lonix1",image_url:"https://github.com/lonix1.png",imageURL:"https://github.com/lonix1.png"}],hide_table_of_contents:!1},unlisted:!1,nextItem:{title:"Welcome to Woodpecker's cookbook blog",permalink:"/cookbook/hello-cookbook"}},l={authorsImageUrls:[void 0]},p=[{value:"Invoking deploy script via SSH",id:"invoking-deploy-script-via-ssh",level:2},{value:"Polling for asset changes",id:"polling-for-asset-changes",level:2},{value:"Using a configuration management tool",id:"using-a-configuration-management-tool",level:2},{value:"Using webhooks (recommended)",id:"using-webhooks-recommended",level:2}];function c(e){const n={a:"a",em:"em",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A typical CI pipeline contains steps such as: ",(0,t.jsx)(n.em,{children:"clone"}),", ",(0,t.jsx)(n.em,{children:"build"}),", ",(0,t.jsx)(n.em,{children:"test"}),", ",(0,t.jsx)(n.em,{children:"package"})," and ",(0,t.jsx)(n.em,{children:"push"}),". The final build product may be artifacts pushed to a git repository or a docker container pushed to a container registry."]}),"\n",(0,t.jsxs)(n.p,{children:["When these should be deployed on an app server, the pipeline should include a ",(0,t.jsx)(n.em,{children:"deploy"}),' step, which represents the "CD" in CI/CD - the automatic deployment of a pipeline\'s final product.']}),"\n",(0,t.jsx)(n.p,{children:"There are various ways to accomplish CD with Woodpecker, depending on your project's specific needs."}),"\n",(0,t.jsx)(n.h2,{id:"invoking-deploy-script-via-ssh",children:"Invoking deploy script via SSH"}),"\n",(0,t.jsx)(n.p,{children:"The final step in your pipeline could SSH into the app server and run a deployment script."}),"\n",(0,t.jsx)(n.p,{children:"One of the benefits would be that the deployment script's output could be included in the pipeline's log. However in general, this is a complicated option as it tightly couples the CI and app servers."}),"\n",(0,t.jsxs)(n.p,{children:["An SSH step could be written by using a plugin, like ",(0,t.jsx)(n.a,{href:"https://plugins.drone.io/plugins/ssh",children:"ssh"})," or ",(0,t.jsx)(n.a,{href:"https://woodpecker-ci.org/plugins/Git%20Push",children:"git push"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"polling-for-asset-changes",children:"Polling for asset changes"}),"\n",(0,t.jsx)(n.p,{children:"This option completely decouples the CI and app servers, and there is no explicit deploy step in the pipeline."}),"\n",(0,t.jsx)(n.p,{children:"On the app server, one should create a script or cron job that polls for asset changes (every minute, say). When a new version is detected, the script redeploys the app."}),"\n",(0,t.jsx)(n.p,{children:"This option is easy to maintain, but the downside is a short delay (one minute) before new assets are detected."}),"\n",(0,t.jsx)(n.h2,{id:"using-a-configuration-management-tool",children:"Using a configuration management tool"}),"\n",(0,t.jsx)(n.p,{children:"If you are using a configuration management tool (e.g. Ansible, Chef, Puppet), then you could setup the last pipeline step to call that tool to perform the redeployment."}),"\n",(0,t.jsxs)(n.p,{children:["A plugin for ",(0,t.jsx)(n.a,{href:"https://woodpecker-ci.org/plugins/Ansible",children:"Ansible"})," exists and could be adapted accordingly."]}),"\n",(0,t.jsx)(n.p,{children:"This option is complex and only suitable in an environment in which you're already using configuration management."}),"\n",(0,t.jsx)(n.h2,{id:"using-webhooks-recommended",children:"Using webhooks (recommended)"}),"\n",(0,t.jsx)(n.p,{children:"If your forge (GitHub, GitLab, Gitea, etc.) supports webhooks, then you could create a separate listening app that receives a webhook when new assets are available and redeploys your app."}),"\n",(0,t.jsx)(n.p,{children:'The listening "app" can be something as simple as a PHP script.'}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, there are a number of popular webhook servers that simplify this process, so you only need to write your actual deployment script. For example, ",(0,t.jsx)(n.a,{href:"https://github.com/adnanh/webhook",children:"webhook"})," and ",(0,t.jsx)(n.a,{href:"https://github.com/ncarlier/webhookd",children:"webhookd"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This is arguably the simplest and most maintainable solution."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},71377:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var t=o(79474);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);