"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[1251],{37235:e=>{e.exports=JSON.parse('{"name":"Release Helper","url":"https://github.com/woodpecker-ci/plugin-ready-release-go","description":"Plugin for semi-automated releases.","docs":"<h1>Introduction</h1>\\n<p>This plugin aims to help with git-based releases.\\nIt should be run on every commit of the default branch to execute it\'s necessary actions.</p>\\n<p>A Woodpecker workflow file could look like this:</p>\\n<pre><code class=\\"language-yaml\\">steps:\\n  release-helper:\\n    image: woodpeckerci/plugin-ready-release-go\\n    settings:\\n      # release_branch: \'custom-release-branch\' # default: CI_REPO_DEFAULT_BRANCH\\n      git_email: &lt;email&gt;\\n      github_token:\\n        from_secret: GITHUB_TOKEN\\n\\nwhen:\\n  event: push\\n  branch: ${CI_REPO_DEFAULT_BRANCH}\\n</code></pre>\\n<h2>Features</h2>\\n<ul>\\n<li>Create automated changelog based on PRs which updates itself after each merge to the default branch</li>\\n<li>Auto-categorization of PRs based on labels</li>\\n<li>Automatically determines the next semver version using the PR labels</li>\\n<li>Supports any kind of programming language, changelog tool and commit style</li>\\n<li>Allows to execute custom hooks like pre, post-release</li>\\n</ul>\\n<h2>Settings</h2>\\n<p>There are two parts to configure the plugin:</p>\\n<h3>1. Most basic options can be configured via plugin settings</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>GITHUB_TOKEN</code></td>\\n<td><em>none</em></td>\\n<td>The GitHub token to use for the GitHub API</td>\\n</tr>\\n<tr>\\n<td><code>GIT_EMAIL</code></td>\\n<td><em>none</em></td>\\n<td>The email to use for git commits</td>\\n</tr>\\n<tr>\\n<td><code>RELEASE_BRANCH</code></td>\\n<td>CI_REPO_DEFAULT_BRANCH</td>\\n<td>The branch used to merge the changelog to</td>\\n</tr>\\n<tr>\\n<td><code>PULL_REQUEST_BRANCH_PREFIX</code></td>\\n<td><code>next-release/</code></td>\\n<td>The prefix used for release pull-request branches</td>\\n</tr>\\n<tr>\\n<td><code>DEBUG</code></td>\\n<td><code>false</code></td>\\n<td>Enable debug logging</td>\\n</tr>\\n</tbody></table>\\n<h3>2. Using a <code>release-config.ts</code> file in your repository</h3>\\n<p>Add a <code>release-config.ts</code> file to the root of your repository. Have a look at the <a href=\\"https://github.com/woodpecker-ci/plugin-ready-release-go/blob/main/src/utils/types.ts\\">UserConfig</a> type for all available options.</p>\\n<pre><code class=\\"language-ts\\">export default {\\n  commentOnReleasedPullRequests: false,\\n};\\n</code></pre>\\n<p>The plugin also supports executing custom hooks which can e.g. help to perform additional actions during a release (e.g. updating a helm chart\'s <code>appVersion</code> field):</p>\\n<pre><code class=\\"language-ts\\">export default {\\n  beforePrepare: async ({ exec, nextVersion }) =&gt; {\\n    await exec(`sed -i \\"s/^version:.*$/version: ${nextVersion}/g\\" Chart.yaml`);\\n  },\\n};\\n</code></pre>\\n","tags":["git","release"],"author":"Woodpecker Authors","containerImage":"woodpeckerci/plugin-ready-release-go","containerImageUrl":"https://hub.docker.com/r/woodpeckerci/plugin-ready-release-go","verified":true}')}}]);