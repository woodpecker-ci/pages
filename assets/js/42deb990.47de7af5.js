"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([["3653"],{56663:function(e,s,n){n.r(s),n.d(s,{default:()=>h,frontMatter:()=>i,metadata:()=>r,assets:()=>c,toc:()=>a,contentTitle:()=>l});var r=JSON.parse('{"id":"usage/terminology/index","title":"Terminology","description":"Glossary","source":"@site/docs/20-usage/15-terminology/index.md","sourceDirName":"20-usage/15-terminology","slug":"/usage/terminology/","permalink":"/docs/next/usage/terminology/","draft":false,"unlisted":false,"editUrl":"https://github.com/woodpecker-ci/woodpecker/edit/main/docs/docs/20-usage/15-terminology/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Your first pipeline","permalink":"/docs/next/usage/intro"},"next":{"title":"Workflow syntax","permalink":"/docs/next/usage/workflow-syntax"}}'),o=n("52676"),t=n("23663");let i={},l="Terminology",c={},a=[{value:"Glossary",id:"glossary",level:2},{value:"Woodpecker architecture",id:"woodpecker-architecture",level:2},{value:"Pipeline, workflow &amp; step",id:"pipeline-workflow--step",level:2},{value:"Conventions",id:"conventions",level:2}];function d(e){let s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"terminology",children:"Terminology"})}),"\n",(0,o.jsx)(s.h2,{id:"glossary",children:"Glossary"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Woodpecker CI"}),": The project name around Woodpecker."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Woodpecker"}),": An open-source tool that executes ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax",children:"pipelines"})," on your code."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Server"}),": The component of Woodpecker that handles webhooks from forges, orchestrates agents, and sends status back. It also serves the API and web UI for administration and configuration."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Agent"}),": A component of Woodpecker that executes ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax",children:"pipelines"})," (specifically one or more ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflows"}),") with a specific backend (e.g. ",(0,o.jsx)(s.a,{href:"/docs/next/administration/backends/docker",children:"Docker"}),", Kubernetes, ",(0,o.jsx)(s.a,{href:"/docs/next/administration/backends/local",children:"local"}),"). It connects to the server via GRPC."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"CLI"}),": The Woodpecker command-line interface (CLI) is a terminal tool used to administer the server, to execute pipelines locally for debugging / testing purposes, and to perform tasks like linting pipelines."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax",children:"Pipeline"})}),": A sequence of ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflows"})," that are executed on the code. Pipelines are triggered by events."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"Workflow"})}),": A sequence of steps and services that are executed as part of a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax",children:"pipeline"}),". Workflows are represented by YAML files. Each workflow has its own isolated ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax#workspace",children:"workspace"}),", and often additional resources like a shared network (docker)."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Steps"}),": Individual commands, actions or tasks within a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Code"}),": Refers to the files tracked by the version control system used by the ",(0,o.jsx)(s.a,{href:"/docs/next/administration/forges/overview",children:"forge"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Repos"}),": Short for repositories, these are storage locations where code is stored."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/administration/forges/overview",children:"Forge"})}),": The hosting platform or service where the repositories are hosted."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax#workspace",children:"Workspace"})}),": A folder shared between all steps of a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"})," containing the repository and all the generated data from previous steps."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax#event",children:"Event"})}),": Triggers the execution of a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflow-syntax",children:"pipeline"}),", such as a ",(0,o.jsx)(s.a,{href:"/docs/next/administration/forges/overview",children:"forge"})," event like ",(0,o.jsx)(s.code,{children:"push"}),", or ",(0,o.jsx)(s.code,{children:"manual"})," triggered manually from the UI."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Commit"}),": A defined state of the code, usually associated with a version control system like Git."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/usage/matrix-workflows",children:"Matrix"})}),": A configuration option that allows the execution of ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflows"})," for each value in the matrix."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Service"}),": A service is a step that is executed from the start of a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"})," until its end. It can be accessed by name via the network from other steps within the same ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.a,{href:"/docs/next/usage/plugins/overview",children:"Plugins"})}),": Plugins are extensions that provide pre-defined actions or commands for a step in a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"}),". They can be configured via settings."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Container"}),": A lightweight and isolated environment where commands are executed."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"YAML File"}),": A file format used to define and configure ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflows"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Dependency"}),": ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"Workflows"})," can depend on each other, and if possible, they are executed in parallel."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Status"}),": Status refers to the outcome of a step or ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"})," after it has been executed, determined by the internal command exit code. At the end of a ",(0,o.jsx)(s.a,{href:"/docs/next/usage/workflows",children:"workflow"}),", its status is sent to the ",(0,o.jsx)(s.a,{href:"/docs/next/administration/forges/overview",children:"forge"}),"."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Service extension"}),": Some parts of Woodpecker internal services like secrets storage or config fetcher can be replaced through service extensions."]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"woodpecker-architecture",children:"Woodpecker architecture"}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.img,{alt:"Woodpecker architecture",src:n(83273).Z+"",width:"1283",height:"780"})}),"\n",(0,o.jsx)(s.h2,{id:"pipeline-workflow--step",children:"Pipeline, workflow & step"}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.img,{alt:"Relation between pipelines, workflows and steps",src:n(62428).Z+"",width:"1074",height:"520"})}),"\n",(0,o.jsx)(s.h2,{id:"conventions",children:"Conventions"}),"\n",(0,o.jsx)(s.p,{children:"Sometimes there are multiple terms that can be used to describe something. This section lists the preferred terms to use in Woodpecker:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["Environment variables ",(0,o.jsx)(s.code,{children:"*_LINK"})," should be called ",(0,o.jsx)(s.code,{children:"*_URL"}),". In the code use ",(0,o.jsx)(s.code,{children:"URL()"})," instead of ",(0,o.jsx)(s.code,{children:"Link()"})]}),"\n",(0,o.jsxs)(s.li,{children:["Use the term ",(0,o.jsx)(s.strong,{children:"pipelines"})," instead of the previous ",(0,o.jsx)(s.strong,{children:"builds"})]}),"\n",(0,o.jsxs)(s.li,{children:["Use the term ",(0,o.jsx)(s.strong,{children:"steps"})," instead of the previous ",(0,o.jsx)(s.strong,{children:"jobs"})]}),"\n",(0,o.jsxs)(s.li,{children:["Use the prefix ",(0,o.jsx)(s.code,{children:"WOODPECKER_EXPERT_"})," for advanced environment variables that are normally not required to be set by users"]}),"\n"]})]})}function h(e={}){let{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},83273:function(e,s,n){n.d(s,{Z:function(){return r}});let r=n.p+"assets/images/architecture-f5d5b825eacf303d3080d73a2c641bdd.svg"},62428:function(e,s,n){n.d(s,{Z:function(){return r}});let r=n.p+"assets/images/pipeline-workflow-step-3f557a68039086cd959e6106d7846abb.svg"},23663:function(e,s,n){n.d(s,{Z:function(){return l},a:function(){return i}});var r=n(75271);let o={},t=r.createContext(o);function i(e){let s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);