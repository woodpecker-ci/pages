"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[6028],{82339:e=>{e.exports=JSON.parse('{"name":"Gitea Create Pull Request","url":"https://codeberg.org/JohnWalkerx/gitea-pull-request-create-plugin","icon":"https://codeberg.org/forgejo/forgejo/raw/branch/forgejo/public/assets/img/svg/octicon-git-pull-request.svg","description":"Plugin to create a new pull request on a Gitea/Forgejo repo.","docs":"<p>Woodpecker CI plugin to create new pull requests on a Gitea/Forgejo repo.</p>\\n<p>It lets you create a new PR of a specified branch and can trigger an automerge of the PR.</p>\\n<p>If a PR for the specified branch already exists it skip the PR creation.\\nSo you can create workflows for e.g. update dependencies with a automated PR workflow.</p>\\n<p>You\'ll need to generate an Gitea/Forgejo API token for authentification.</p>\\n<p><strong>NOTE:</strong> The option <code>delete_branch_after_merge</code> doesn\'t work in combination with automerge due to <a href=\\"https://codeberg.org/forgejo/forgejo/issues/933\\">this issue</a> in Forgejo/Gitea. So the branch won\'t get deleted after a merge. On the next run it creates an empty PR because the branch still exists but with no diff to the main branch.</p>\\n<p>As a workaround for this issue the option <code>close_pr_if_empty</code> and <code>delete_branch_if_pr_empty</code> is useful.</p>\\n<h2>Settings</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Settings Name</th>\\n<th>Default</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>gitea_address</td>\\n<td><em>none</em></td>\\n<td>Address of the Gitea/Forgejo instance</td>\\n</tr>\\n<tr>\\n<td>gitea_token</td>\\n<td><em>none</em></td>\\n<td>API token for authentification on Gitea/Forgejo instance</td>\\n</tr>\\n<tr>\\n<td>owner</td>\\n<td><em>none</em></td>\\n<td>Owner of the repo owner</td>\\n</tr>\\n<tr>\\n<td>repo</td>\\n<td><em>none</em></td>\\n<td>Repository name</td>\\n</tr>\\n<tr>\\n<td>branch</td>\\n<td><em>none</em></td>\\n<td>Branch name for which you wanna create a PR</td>\\n</tr>\\n<tr>\\n<td>base_branch</td>\\n<td><em>none</em></td>\\n<td>Name of the base branch you want to merge into</td>\\n</tr>\\n<tr>\\n<td>pr_title</td>\\n<td><em>none</em></td>\\n<td>Title of the PR</td>\\n</tr>\\n<tr>\\n<td>pr_body</td>\\n<td><em>none</em></td>\\n<td>Body content of the PR</td>\\n</tr>\\n<tr>\\n<td>skip_on_missing_branch</td>\\n<td><em>false</em></td>\\n<td>Skip PR creation if branch don\'t exist. Otherwise return with failure.</td>\\n</tr>\\n<tr>\\n<td>close_pr_if_empty</td>\\n<td><em>false</em></td>\\n<td>Close PR if there is no difference between branch and base_branch</td>\\n</tr>\\n<tr>\\n<td>delete_branch_if_pr_empty</td>\\n<td><em>false</em></td>\\n<td>Delete branch if there is no difference between branch und base_branch</td>\\n</tr>\\n<tr>\\n<td>merge_when_checks_succeed</td>\\n<td><em>false</em></td>\\n<td>Automerge branch when all specified checks succeeded successful</td>\\n</tr>\\n<tr>\\n<td>delete_branch_after_merge</td>\\n<td><em>false</em></td>\\n<td>Delete branch after PR got merged automatically</td>\\n</tr>\\n</tbody></table>\\n<h2>Example</h2>\\n<pre><code class=\\"language-yaml\\">steps:\\n  create-pr:\\n    image: johnwalkerx/gitea-pull-request-create-plugin:latest\\n    pull: true\\n    settings:\\n      gitea_address: https://codeberg.org\\n      gitea_token:\\n        from_secret: token\\n      owner: ${CI_REPO_OWNER}\\n      repo: ${CI_REPO_NAME}\\n      branch: ${CI_COMMIT_BRANCH}\\n      base_branch: main\\n      pr_title: My pull request title\\n      pr_body: PR automatically created by Woodpecker CI\\n      skip_on_missing_branch: true\\n      close_pr_if_empty: true\\n      delete_branch_if_pr_empty: true\\n      merge_when_checks_succeed: true\\n      delete_branch_after_merge: true\\n</code></pre>\\n","tags":["Gitea","PullRequest"],"author":"JohnWalkerx","containerImage":"johnwalkerx/gitea-pull-request-create-plugin","containerImageUrl":"https://hub.docker.com/r/johnwalkerx/gitea-pull-request-create-plugin","verified":false}')}}]);