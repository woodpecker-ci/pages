components:
  schemas:
    Agent:
      properties:
        backend:
          type: string
        capacity:
          type: integer
        created:
          type: integer
        id:
          type: integer
        last_contact:
          type: integer
        last_work:
          description: >-
            last time the agent did something, this value is used to determine
            if the agent is still doing work used by the autoscaler
          type: integer
        name:
          type: string
        no_schedule:
          type: boolean
        owner_id:
          type: integer
        platform:
          type: string
        token:
          type: string
        updated:
          type: integer
        version:
          type: string
      type: object
    Config:
      properties:
        data:
          items:
            type: integer
          type: array
        hash:
          type: string
        name:
          type: string
      type: object
    Cron:
      properties:
        branch:
          type: string
        created:
          type: integer
        creator_id:
          type: integer
        id:
          type: integer
        name:
          type: string
        next_exec:
          type: integer
        repo_id:
          type: integer
        schedule:
          description: "@weekly,\t3min, ..."
          type: string
      type: object
    Feed:
      properties:
        author:
          type: string
        author_avatar:
          type: string
        author_email:
          type: string
        branch:
          type: string
        commit:
          type: string
        created:
          type: integer
        event:
          type: string
        finished:
          type: integer
        id:
          type: integer
        message:
          type: string
        number:
          type: integer
        ref:
          type: string
        refspec:
          type: string
        repo_id:
          type: integer
        started:
          type: integer
        status:
          type: string
        title:
          type: string
      type: object
    Forge:
      properties:
        additional_options:
          additionalProperties: {}
          type: object
        client:
          type: string
        id:
          type: integer
        oauth_host:
          description: public url for oauth if different from url
          type: string
        skip_verify:
          type: boolean
        type:
          $ref: '#/components/schemas/model.ForgeType'
        url:
          type: string
      type: object
    LogEntry:
      properties:
        data:
          items:
            type: integer
          type: array
        id:
          type: integer
        line:
          type: integer
        step_id:
          type: integer
        time:
          type: integer
        type:
          $ref: '#/components/schemas/LogEntryType'
      type: object
    LogEntryType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      x-enum-varnames:
        - LogEntryStdout
        - LogEntryStderr
        - LogEntryExitCode
        - LogEntryMetadata
        - LogEntryProgress
    Org:
      properties:
        forge_id:
          type: integer
        id:
          type: integer
        is_user:
          type: boolean
        name:
          type: string
      type: object
    OrgPerm:
      properties:
        admin:
          type: boolean
        member:
          type: boolean
      type: object
    Perm:
      properties:
        admin:
          type: boolean
        created:
          type: integer
        pull:
          type: boolean
        push:
          type: boolean
        synced:
          type: integer
        updated:
          type: integer
      type: object
    Pipeline:
      properties:
        author:
          type: string
        author_avatar:
          type: string
        author_email:
          type: string
        branch:
          type: string
        changed_files:
          items:
            type: string
          type: array
        commit:
          type: string
        created:
          type: integer
        deploy_task:
          type: string
        deploy_to:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/types.PipelineError'
          type: array
        event:
          $ref: '#/components/schemas/WebhookEvent'
        finished:
          type: integer
        forge_url:
          type: string
        id:
          type: integer
        is_prerelease:
          type: boolean
        message:
          type: string
        number:
          type: integer
        parent:
          type: integer
        pr_labels:
          items:
            type: string
          type: array
        ref:
          type: string
        refspec:
          type: string
        reviewed:
          type: integer
        reviewed_by:
          type: string
        sender:
          description: uses reported user for webhooks and name of cron for cron pipelines
          type: string
        started:
          type: integer
        status:
          $ref: '#/components/schemas/StatusValue'
        timestamp:
          type: integer
        title:
          type: string
        updated:
          type: integer
        variables:
          additionalProperties:
            type: string
          type: object
        workflows:
          items:
            $ref: '#/components/schemas/model.Workflow'
          type: array
      type: object
    PipelineOptions:
      properties:
        branch:
          type: string
        variables:
          additionalProperties:
            type: string
          type: object
      type: object
    PullRequest:
      properties:
        index:
          type: string
        title:
          type: string
      type: object
    Registry:
      properties:
        address:
          type: string
        id:
          type: integer
        org_id:
          type: integer
        password:
          type: string
        readonly:
          type: boolean
        repo_id:
          type: integer
        username:
          type: string
      type: object
    Repo:
      properties:
        active:
          type: boolean
        allow_deploy:
          type: boolean
        allow_pr:
          type: boolean
        avatar_url:
          type: string
        cancel_previous_pipeline_events:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        clone_url:
          type: string
        clone_url_ssh:
          type: string
        config_file:
          type: string
        default_branch:
          type: string
        forge_id:
          type: integer
        forge_remote_id:
          description: >-
            ForgeRemoteID is the unique identifier for the repository on the
            forge.
          type: string
        forge_url:
          type: string
        full_name:
          type: string
        gated:
          type: boolean
        id:
          type: integer
        name:
          type: string
        netrc_only_trusted:
          type: boolean
        org_id:
          type: integer
        owner:
          type: string
        pr_enabled:
          type: boolean
        private:
          type: boolean
        scm:
          $ref: '#/components/schemas/SCMKind'
        timeout:
          type: integer
        trusted:
          type: boolean
        visibility:
          $ref: '#/components/schemas/RepoVisibility'
      type: object
    RepoPatch:
      properties:
        allow_deploy:
          type: boolean
        allow_pr:
          type: boolean
        cancel_previous_pipeline_events:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        config_file:
          type: string
        gated:
          type: boolean
        netrc_only_trusted:
          type: boolean
        timeout:
          type: integer
        trusted:
          type: boolean
        visibility:
          type: string
      type: object
    RepoVisibility:
      enum:
        - public
        - private
        - internal
      type: string
      x-enum-varnames:
        - VisibilityPublic
        - VisibilityPrivate
        - VisibilityInternal
    SCMKind:
      enum:
        - git
        - hg
        - fossil
        - perforce
      type: string
      x-enum-varnames:
        - RepoGit
        - RepoHg
        - RepoFossil
        - RepoPerforce
    Secret:
      properties:
        events:
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
        id:
          type: integer
        images:
          items:
            type: string
          type: array
        name:
          type: string
        org_id:
          type: integer
        repo_id:
          type: integer
        value:
          type: string
      type: object
    StatusValue:
      enum:
        - skipped
        - pending
        - running
        - success
        - failure
        - killed
        - error
        - blocked
        - declined
        - created
      type: string
      x-enum-comments:
        StatusBlocked: waiting for approval
        StatusCreated: created / internal use only
        StatusDeclined: blocked and declined
        StatusError: error with the config / while parsing / some other system problem
        StatusFailure: failed to finish (exit code != 0)
        StatusKilled: killed by user
        StatusPending: pending to be executed
        StatusRunning: currently running
        StatusSkipped: skipped as another step failed
        StatusSuccess: successfully finished
      x-enum-varnames:
        - StatusSkipped
        - StatusPending
        - StatusRunning
        - StatusSuccess
        - StatusFailure
        - StatusKilled
        - StatusError
        - StatusBlocked
        - StatusDeclined
        - StatusCreated
    Step:
      properties:
        error:
          type: string
        exit_code:
          type: integer
        finished:
          type: integer
        id:
          type: integer
        name:
          type: string
        pid:
          type: integer
        pipeline_id:
          type: integer
        ppid:
          type: integer
        started:
          type: integer
        state:
          $ref: '#/components/schemas/StatusValue'
        type:
          $ref: '#/components/schemas/StepType'
        uuid:
          type: string
      type: object
    StepType:
      enum:
        - clone
        - service
        - plugin
        - commands
        - cache
      type: string
      x-enum-varnames:
        - StepTypeClone
        - StepTypeService
        - StepTypePlugin
        - StepTypeCommands
        - StepTypeCache
    Task:
      properties:
        agent_id:
          type: integer
        dep_status:
          additionalProperties:
            $ref: '#/components/schemas/StatusValue'
          type: object
        dependencies:
          items:
            type: string
          type: array
        id:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        run_on:
          items:
            type: string
          type: array
      type: object
    User:
      properties:
        admin:
          description: |-
            Admin indicates the user is a system administrator.

            NOTE: If the username is part of the WOODPECKER_ADMIN
            environment variable, this value will be set to true on login.
          type: boolean
        avatar_url:
          description: the avatar url for this user.
          type: string
        email:
          description: |-
            Email is the email address for this user.

            required: true
          type: string
        forge_id:
          type: integer
        id:
          description: |-
            the id for this user.

            required: true
          type: integer
        login:
          description: |-
            Login is the username for this user.

            required: true
          type: string
        org_id:
          description: OrgID is the of the user as model.Org.
          type: integer
      type: object
    WebhookEvent:
      enum:
        - push
        - pull_request
        - pull_request_closed
        - tag
        - release
        - deployment
        - cron
        - manual
      type: string
      x-enum-varnames:
        - EventPush
        - EventPull
        - EventPullClosed
        - EventTag
        - EventRelease
        - EventDeploy
        - EventCron
        - EventManual
    model.ForgeType:
      enum:
        - github
        - gitlab
        - gitea
        - forgejo
        - bitbucket
        - bitbucket-dc
        - addon
      type: string
      x-enum-varnames:
        - ForgeTypeGithub
        - ForgeTypeGitlab
        - ForgeTypeGitea
        - ForgeTypeForgejo
        - ForgeTypeBitbucket
        - ForgeTypeBitbucketDatacenter
        - ForgeTypeAddon
    model.Workflow:
      properties:
        agent_id:
          type: integer
        children:
          items:
            $ref: '#/components/schemas/Step'
          type: array
        environ:
          additionalProperties:
            type: string
          type: object
        error:
          type: string
        finished:
          type: integer
        id:
          type: integer
        name:
          type: string
        pid:
          type: integer
        pipeline_id:
          type: integer
        platform:
          type: string
        started:
          type: integer
        state:
          $ref: '#/components/schemas/StatusValue'
      type: object
    types.PipelineError:
      properties:
        data: {}
        is_warning:
          type: boolean
        message:
          type: string
        type:
          $ref: '#/components/schemas/types.PipelineErrorType'
      type: object
    types.PipelineErrorType:
      enum:
        - linter
        - deprecation
        - compiler
        - generic
        - bad_habit
      type: string
      x-enum-comments:
        PipelineErrorTypeBadHabit: some bad-habit error
        PipelineErrorTypeCompiler: some error with the config semantics
        PipelineErrorTypeDeprecation: using some deprecated feature
        PipelineErrorTypeGeneric: some generic error
        PipelineErrorTypeLinter: some error with the config syntax
      x-enum-varnames:
        - PipelineErrorTypeLinter
        - PipelineErrorTypeDeprecation
        - PipelineErrorTypeCompiler
        - PipelineErrorTypeGeneric
        - PipelineErrorTypeBadHabit
info:
  contact:
    name: Woodpecker CI Community
    url: https://woodpecker-ci.org/
  description: >-
    Woodpecker is a simple, yet powerful CI/CD engine with great extensibility.

    To get a personal access token (PAT) for authentication, please log in your
    Woodpecker server,

    and go to you personal profile page, by clicking the user icon at the top
    right.
  title: Woodpecker CI API
  version: dev
openapi: 3.0.3
paths:
  /agents:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                type: array
          description: OK
      summary: List agents
      tags:
        - Agents
    post:
      description: Creates a new agent with a random token
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Agent'
        description: the agent's data (only 'name' and 'no_schedule' are read)
        required: true
        x-originalParamName: agent
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
      summary: Create a new agent
      tags:
        - Agents
  /agents/{agent}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the agent's id
          in: path
          name: agent
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Delete an agent
      tags:
        - Agents
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the agent's id
          in: path
          name: agent
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
      summary: Get an agent
      tags:
        - Agents
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the agent's id
          in: path
          name: agent
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Agent'
        description: the agent's data
        required: true
        x-originalParamName: agentData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
      summary: Update an agent
      tags:
        - Agents
  /agents/{agent}/tasks:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the agent's id
          in: path
          name: agent
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: OK
      summary: List agent tasks
      tags:
        - Agents
  /badges/{repo_id}/cc.xml:
    get:
      description: >-
        CCMenu displays the pipeline status of projects on a CI server as an
        item in the Mac's menu bar.

        More details on how to install, you can find at http://ccmenu.org/

        The response format adheres to CCTray v1 Specification,
        https://cctray.org/v1/
      parameters:
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Provide pipeline status information to the CCMenu tool
      tags:
        - Badges
  /badges/{repo_id}/status.svg:
    get:
      parameters:
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Get status of pipeline as SVG badge
      tags:
        - Badges
  /debug/pprof:
    get:
      description: Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: List available pprof profiles (HTML)
      tags:
        - Process profiling and debugging
  /debug/pprof/block:
    get:
      description: Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: >-
        Get pprof stack traces that led to blocking on synchronization
        primitives
      tags:
        - Process profiling and debugging
  /debug/pprof/cmdline:
    get:
      description: Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Get the command line invocation of the current program
      tags:
        - Process profiling and debugging
  /debug/pprof/goroutine:
    get:
      description: Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: >-
            Use debug=2 as a query parameter to export in the same format as an
            un-recovered panic
          in: query
          name: debug
          schema:
            default: 1
            type: integer
      responses:
        '200':
          description: OK
      summary: Get pprof stack traces of all current goroutines
      tags:
        - Process profiling and debugging
  /debug/pprof/heap:
    get:
      description: Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: You can specify gc=heap to run GC before taking the heap sample
          in: query
          name: gc
          schema:
            default: ''
            type: string
      responses:
        '200':
          description: OK
      summary: Get pprof heap dump, a sampling of memory allocations of live objects
      tags:
        - Process profiling and debugging
  /debug/pprof/profile:
    get:
      description: >-
        Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

        After you get the profile file, use the go tool pprof command to
        investigate the profile.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: You can specify the duration in the seconds GET parameter.
          in: query
          name: seconds
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Get pprof CPU profile
      tags:
        - Process profiling and debugging
  /debug/pprof/symbol:
    get:
      description: >-
        Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

        Looks up the program counters listed in the request,

        responding with a table mapping program counters to function names.

        The requested program counters can be provided via GET + query
        parameters,

        or POST + body parameters. Program counters shall be space delimited.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Get pprof program counters mapping to function names
      tags:
        - Process profiling and debugging
    post:
      description: >-
        Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

        Looks up the program counters listed in the request,

        responding with a table mapping program counters to function names.

        The requested program counters can be provided via GET + query
        parameters,

        or POST + body parameters. Program counters shall be space delimited.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Get pprof program counters mapping to function names
      tags:
        - Process profiling and debugging
  /debug/pprof/threadcreate:
    get:
      description: Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Get pprof stack traces that led to the creation of new OS threads
      tags:
        - Process profiling and debugging
  /debug/pprof/trace:
    get:
      description: >-
        Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

        After you get the profile file, use the go tool pprof command to
        investigate the profile.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: You can specify the duration in the seconds GET parameter.
          in: query
          name: seconds
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Get a trace of execution of the current program
      tags:
        - Process profiling and debugging
  /forges:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          schema:
            default: Bearer <personal access token>
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Forge'
                type: array
          description: OK
      summary: List forges
      tags:
        - Forges
    post:
      description: Creates a new forge with a random token
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Forge'
        description: the forge's data (only 'name' and 'no_schedule' are read)
        required: true
        x-originalParamName: forge
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forge'
          description: OK
      summary: Create a new forge
      tags:
        - Forges
  /forges/{forgeId}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the forge's id
          in: path
          name: forgeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Delete a forge
      tags:
        - Forges
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the forge's id
          in: path
          name: forgeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forge'
          description: OK
      summary: Get a forge
      tags:
        - Forges
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the forge's id
          in: path
          name: forgeId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Forge'
        description: the forge's data
        required: true
        x-originalParamName: forgeData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forge'
          description: OK
      summary: Update a forge
      tags:
        - Forges
  /healthz:
    get:
      description: >-
        If everything is fine, just a 204 will be returned, a 500 signals server
        state is unhealthy.
      responses:
        '204':
          description: No Content
        '500':
          description: Internal Server Error
      summary: Health information
      tags:
        - System
  /hook:
    post:
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        description: the webhook payload; forge is automatically detected
        required: true
        x-originalParamName: hook
      responses:
        '200':
          description: OK
      summary: Incoming webhook from forge
      tags:
        - System
  /log-level:
    get:
      description: Endpoint returns the current logging level. Requires admin rights.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  log-level:
                    type: string
                type: object
          description: OK
      summary: Current log level
      tags:
        - System
    post:
      description: Endpoint sets the current logging level. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              properties:
                log-level:
                  type: string
              type: object
        description: >-
          the new log level, one of
          <debug,trace,info,warn,error,fatal,panic,disabled>
        required: true
        x-originalParamName: log-level
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  log-level:
                    type: string
                type: object
          description: OK
      summary: Set log level
      tags:
        - System
  /org/lookup/{org_full_name}:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the organizations full name / slug
          in: path
          name: org_full_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: OK
      summary: Lookup an organization by full name
      tags:
        - Organizations
  /orgs:
    get:
      description: Returns all registered orgs in the system. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Org'
                type: array
          description: OK
      summary: List organizations
      tags:
        - Orgs
  /orgs/{id}:
    delete:
      description: Deletes the given org. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete an organization
      tags:
        - Orgs
  /orgs/{org_id}:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the organization's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Org'
                type: array
          description: OK
      summary: Get an organization
      tags:
        - Organization
  /orgs/{org_id}/permissions:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the organization's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrgPerm'
                type: array
          description: OK
      summary: >-
        Get the permissions of the currently authenticated user for the given
        organization
      tags:
        - Organization permissions
  /orgs/{org_id}/registries:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Registry'
                type: array
          description: OK
      summary: List organization registries
      tags:
        - Organization registries
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registry'
        description: the new registry
        required: true
        x-originalParamName: registryData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Create an organization registry
      tags:
        - Organization registries
  /orgs/{org_id}/registries/{registry}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: the registry's name
          in: path
          name: registry
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete an organization registry by name
      tags:
        - Organization registries
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: the registry's address
          in: path
          name: registry
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Get a organization registry by address
      tags:
        - Organization registries
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: the registry's name
          in: path
          name: registry
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registry'
        description: the update registry data
        required: true
        x-originalParamName: registryData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Update an organization registry by name
      tags:
        - Organization registries
  /orgs/{org_id}/secrets:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: OK
      summary: List organization secrets
      tags:
        - Organization secrets
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        description: the new secret
        required: true
        x-originalParamName: secretData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Create an organization secret
      tags:
        - Organization secrets
  /orgs/{org_id}/secrets/{secret}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: the secret's name
          in: path
          name: secret
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete an organization secret by name
      tags:
        - Organization secrets
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: the secret's name
          in: path
          name: secret
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Get a organization secret by name
      tags:
        - Organization secrets
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the org's id
          in: path
          name: org_id
          required: true
          schema:
            type: string
        - description: the secret's name
          in: path
          name: secret
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        description: the update secret data
        required: true
        x-originalParamName: secretData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Update an organization secret by name
      tags:
        - Organization secrets
  /pipelines:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feed'
                type: array
          description: OK
      summary: List pipelines in queue
      tags:
        - Pipeline queues
  /queue/info:
    get:
      description: >-
        TODO: link the InfoT response object - this is blocked, until the
        `swaggo/swag` tool dependency is v1.18.12 or newer
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      summary: Get pipeline queue information
      tags:
        - Pipeline queues
  /queue/norunningpipelines:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '204':
          description: No Content
      summary: Block til pipeline queue has a running item
      tags:
        - Pipeline queues
  /queue/pause:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '204':
          description: No Content
      summary: Pause the pipeline queue
      tags:
        - Pipeline queues
  /queue/resume:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '204':
          description: No Content
      summary: Resume the pipeline queue
      tags:
        - Pipeline queues
  /registries:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Registry'
                type: array
          description: OK
      summary: List global registries
      tags:
        - Registries
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registry'
        description: the registry object data
        required: true
        x-originalParamName: registry
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Create a global registry
      tags:
        - Registries
  /registries/{registry}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the registry's name
          in: path
          name: registry
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete a global registry by name
      tags:
        - Registries
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the registry's name
          in: path
          name: registry
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Get a global registry by name
      tags:
        - Registries
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the registry's name
          in: path
          name: registry
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registry'
        description: the registry's data
        required: true
        x-originalParamName: registryData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Update a global registry by name
      tags:
        - Registries
  /repos:
    get:
      description: Returns a list of all repositories. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: only list active repos
          in: query
          name: active
          schema:
            type: boolean
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repo'
                type: array
          description: OK
      summary: List all repositories on the server
      tags:
        - Repositories
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the id of a repository at the forge
          in: query
          name: forge_remote_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
          description: OK
      summary: Activate a repository
      tags:
        - Repositories
  /repos/lookup/{repo_full_name}:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository full name / slug
          in: path
          name: repo_full_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
          description: OK
      summary: Lookup a repository by full name
      tags:
        - Repositories
  /repos/repair:
    post:
      description: Executes a repair process on all repositories. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '204':
          description: No Content
      summary: Repair all repositories on the server
      tags:
        - Repositories
  /repos/{repo_id}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
          description: OK
      summary: Delete a repository
      tags:
        - Repositories
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
          description: OK
      summary: Get a repository
      tags:
        - Repositories
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RepoPatch'
        description: the repository's information
        required: true
        x-originalParamName: repo
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
          description: OK
      summary: Update a repository
      tags:
        - Repositories
  /repos/{repo_id}/branches:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Get branches of a repository
      tags:
        - Repositories
  /repos/{repo_id}/chown:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
          description: OK
      summary: Change a repository's owner to the currently authenticated user
      tags:
        - Repositories
  /repos/{repo_id}/cron:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Cron'
                type: array
          description: OK
      summary: List cron jobs
      tags:
        - Repository cron jobs
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Cron'
        description: the new cron job
        required: true
        x-originalParamName: cronJob
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cron'
          description: OK
      summary: Create a cron job
      tags:
        - Repository cron jobs
  /repos/{repo_id}/cron/{cron}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the cron job id
          in: path
          name: cron
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete a cron job
      tags:
        - Repository cron jobs
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the cron job id
          in: path
          name: cron
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cron'
          description: OK
      summary: Get a cron job
      tags:
        - Repository cron jobs
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the cron job id
          in: path
          name: cron
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Cron'
        description: the cron job data
        required: true
        x-originalParamName: cronJob
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cron'
          description: OK
      summary: Update a cron job
      tags:
        - Repository cron jobs
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the cron job id
          in: path
          name: cron
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: OK
      summary: Start a cron job now
      tags:
        - Repository cron jobs
  /repos/{repo_id}/logs/{number}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
      summary: Deletes all logs of a pipeline
      tags:
        - Pipeline logs
  /repos/{repo_id}/logs/{number}/{stepID}:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
        - description: the step id
          in: path
          name: stepID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LogEntry'
                type: array
          description: OK
      summary: Get logs for a pipeline step
      tags:
        - Pipeline logs
  /repos/{repo_id}/logs/{number}/{stepId}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
        - description: the step id
          in: path
          name: stepId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
      summary: Delete step logs of a pipeline
      tags:
        - Pipeline logs
  /repos/{repo_id}/move:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the username to move the repository to
          in: query
          name: to
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Move a repository to a new owner
      tags:
        - Repositories
  /repos/{repo_id}/permissions:
    get:
      description: The repository permission, according to the used access token.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Perm'
          description: OK
      summary: Check current authenticated users access to the repository
      tags:
        - Repositories
  /repos/{repo_id}/pipelines:
    get:
      description: Get a list of pipelines for a repository.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
        - description: only return pipelines before this RFC3339 date
          in: query
          name: before
          schema:
            type: string
        - description: only return pipelines after this RFC3339 date
          in: query
          name: after
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pipeline'
                type: array
          description: OK
      summary: List repository pipelines
      tags:
        - Pipelines
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PipelineOptions'
        description: the options for the pipeline to run
        required: true
        x-originalParamName: options
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: OK
      summary: Trigger a manual pipeline
      tags:
        - Pipelines
  /repos/{repo_id}/pipelines/{number}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
      summary: Delete a pipeline
      tags:
        - Pipelines
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline, OR 'latest'
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: OK
      summary: Get a repositories pipeline
      tags:
        - Pipelines
    post:
      description: Restarts a pipeline optional with altered event, deploy or environment
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
        - description: override the event type
          in: query
          name: event
          schema:
            type: string
        - description: override the target deploy value
          in: query
          name: deploy_to
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: OK
      summary: Restart a pipeline
      tags:
        - Pipelines
  /repos/{repo_id}/pipelines/{number}/approve:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: OK
      summary: Approve and start a pipeline
      tags:
        - Pipelines
  /repos/{repo_id}/pipelines/{number}/cancel:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Cancel a pipeline
      tags:
        - Pipelines
  /repos/{repo_id}/pipelines/{number}/config:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Config'
                type: array
          description: OK
      summary: Get configuration files for a pipeline
      tags:
        - Pipelines
  /repos/{repo_id}/pipelines/{number}/decline:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: OK
      summary: Decline a pipeline
      tags:
        - Pipelines
  /repos/{repo_id}/pull_requests:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PullRequest'
                type: array
          description: OK
      summary: List active pull requests of a repository
      tags:
        - Repositories
  /repos/{repo_id}/registries:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Registry'
                type: array
          description: OK
      summary: List registries
      tags:
        - Repository registries
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registry'
        description: the new registry data
        required: true
        x-originalParamName: registry
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Create a registry
      tags:
        - Repository registries
  /repos/{repo_id}/registries/{registry}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the registry name
          in: path
          name: registry
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete a registry by name
      tags:
        - Repository registries
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the registry name
          in: path
          name: registry
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Get a registry by name
      tags:
        - Repository registries
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the registry name
          in: path
          name: registry
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Registry'
        description: the attributes for the registry
        required: true
        x-originalParamName: registryData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: OK
      summary: Update a registry by name
      tags:
        - Repository registries
  /repos/{repo_id}/repair:
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
      summary: Repair a repository
      tags:
        - Repositories
  /repos/{repo_id}/secrets:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: OK
      summary: List repository secrets
      tags:
        - Repository secrets
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        description: the new secret
        required: true
        x-originalParamName: secret
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Create a repository secret
      tags:
        - Repository secrets
  /repos/{repo_id}/secrets/{secretName}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the secret name
          in: path
          name: secretName
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete a repository secret by name
      tags:
        - Repository secrets
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the secret name
          in: path
          name: secretName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Get a repository secret by name
      tags:
        - Repository secrets
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the secret name
          in: path
          name: secretName
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        description: the secret itself
        required: true
        x-originalParamName: secret
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Update a repository secret by name
      tags:
        - Repository secrets
  /secrets:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: OK
      summary: List global secrets
      tags:
        - Secrets
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        description: the secret object data
        required: true
        x-originalParamName: secret
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Create a global secret
      tags:
        - Secrets
  /secrets/{secret}:
    delete:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the secret's name
          in: path
          name: secret
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete a global secret by name
      tags:
        - Secrets
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the secret's name
          in: path
          name: secret
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Get a global secret by name
      tags:
        - Secrets
    patch:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the secret's name
          in: path
          name: secret
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Secret'
        description: the secret's data
        required: true
        x-originalParamName: secretData
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: OK
      summary: Update a global secret by name
      tags:
        - Secrets
  /signature/public-key:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Get server's signature public key
      tags:
        - System
  /stream/events:
    get:
      description: With quic and http2 support
      responses:
        '200':
          description: OK
      summary: Stream events like pipeline updates
      tags:
        - Events
  /stream/logs/{repo_id}/{pipeline}/{stepID}:
    get:
      parameters:
        - description: the repository id
          in: path
          name: repo_id
          required: true
          schema:
            type: integer
        - description: the number of the pipeline
          in: path
          name: pipeline
          required: true
          schema:
            type: integer
        - description: the step id
          in: path
          name: stepID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
      summary: Stream logs of a pipeline step
      tags:
        - Pipeline logs
  /user:
    get:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Get the currently authenticated user
      tags:
        - User
  /user/feed:
    get:
      description: >-
        The feed lists the most recent pipeline for the currently authenticated
        user.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feed'
                type: array
          description: OK
      summary: Get the currently authenticated users pipeline feed
      tags:
        - User
  /user/repos:
    get:
      description: Retrieve the currently authenticated User's Repository list
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: query all repos, including inactive ones
          in: query
          name: all
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repo'
                type: array
          description: OK
      summary: Get user's repositories
      tags:
        - User
  /user/token:
    delete:
      description: >-
        Reset's the current personal access token of the user and returns a new
        one.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Reset a token
      tags:
        - User
    post:
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      responses:
        '200':
          description: OK
      summary: Return the token of the current user as string
      tags:
        - User
  /users:
    get:
      description: >-
        Returns all registered, active users in the system. Requires admin
        rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: for response pagination, page offset number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: for response pagination, max items per page
          in: query
          name: perPage
          schema:
            default: 50
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
      summary: List users
      tags:
        - Users
    post:
      description: >-
        Creates a new user account with the specified external login. Requires
        admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        description: the user's data
        required: true
        x-originalParamName: user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Create a user
      tags:
        - Users
  /users/{login}:
    delete:
      description: Deletes the given user. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the user's login name
          in: path
          name: login
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      summary: Delete a user
      tags:
        - Users
    get:
      description: Returns a user with the specified login name. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the user's login name
          in: path
          name: login
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Get a user
      tags:
        - Users
    patch:
      description: Changes the data of an existing user. Requires admin rights.
      parameters:
        - description: Insert your personal access token
          in: header
          name: Authorization
          required: true
          schema:
            default: Bearer <personal access token>
            type: string
        - description: the user's login name
          in: path
          name: login
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: the user's data
        required: true
        x-originalParamName: user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Update a user
      tags:
        - Users
  /version:
    get:
      description: Endpoint returns the server version and build information.
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - type: string
                  - properties:
                      source:
                        type: string
                      version:
                        type: string
                    type: object
          description: OK
      summary: Get version
      tags:
        - System
